
=== upgrade_damcon_inc_hp
metadata: ``` yaml
type: upgrade/damcons
```
    hp = UPGRADE_AGENT.get_inventory_value("HP")
    max_hp = UPGRADE_AGENT.get_inventory_value("HP_MAX", 6)
    hp = min(HP_MAX, hp+1)
    UPGRADE_AGENT.set_inventory_value("HP")
    yield success

=== upgrade_damcon_speed_gym
metadata: ``` yaml
type: upgrade/damcons
dataset: move_speed
```
    jump upgrade_damcon_speed

=== upgrade_damcon_speed_mess
metadata: ``` yaml
type: upgrade/damcons
dataset: move_speed
```
    jump upgrade_damcon_speed


=== upgrade_damcon_speed_quarters
metadata: ``` yaml
type: upgrade/damcons
dataset: move_speed
```
    jump upgrade_damcon_speed


=== upgrade_damcon_speed
metadata: ``` yaml
type: upgrade/damcons
dataset: move_speed
```
    current = UPGRADE_AGENT.dataset.get("move_speed", 0)
    current *= 1.25
    current = UPGRADE_AGENT.dataset.set("move_speed", current,0)
    yield success


=== prefab_lifeform_damcons
metadata: ``` yaml
type: prefab/lifeform/damcons
brain:
  - SEQ: # movement
    - SEL:
      - ai_lifeform_move_keep_going
      - ai_lifeform_move_to_work_order
      - ai_lifeform_move_to_damage
      - ai_lifeform_move_to_idle_pos
    - ai_lifeform_move_to_location
  # Do any Idle
  - label: ai_idle_at_room
    data:
      room: __damaged__
      idle_time: 60
      upgrade: ai_fix_damage
      hp_speed_up: True
  - label: ai_idle_at_room
    data:
      room: sickbay
      idle_time: 120
      upgrade: upgrade_damcon_inc_hp
  - label: ai_idle_at_room
    data:
      room: gym
      idle_time: 60
      upgrade: upgrade_damcon_speed_gym
  - label: ai_idle_at_room
    data:
      room: mess
      idle_time: 60
      upgrade: upgrade_damcon_speed_mess
  - label: ai_idle_at_room
    data:
      room: quarters
      idle_time: 60
      upgrade: upgrade_damcon_speed_quarters
```

=== ai_lifeform_move_keep_going
metadata: ``` yaml
room: __damaged__
```
    length = BRAIN_AGENT.dataset.get("path_length",0)
    yield success if length is not None and length > 0.01
    yield fail


=== ai_lifeform_move_to_work_order
metadata: ``` yaml
room: __damaged__
```
    the_target =  to_object(grid_closest(BRAIN_AGENT_ID, linked_to(BRAIN_AGENT_ID, "work-order")))
    yield fail if the_target is None
    x = the_target.dataset.get("curx",0)
    y = the_target.dataset.get("cury",0)
    set_inventory_value(BRAIN_AGENT_ID, "blackboard:target_pos", (x,y))
    yield success


=== ai_lifeform_move_to_damage
metadata: ``` yaml
room: __damaged__
upgrade: ai_fix_damage
idle_time: 60
hp_speed_up: False
```
    yield fail if to_object(BRAIN_AGENT.host_id) is None
    any_damage = to_object(grid_closest(BRAIN_AGENT_ID,role("__damaged__")))
    yield fail if any_damage is None
    x = any_damage.dataset.get("curx",0)
    y = any_damage.dataset.get("cury",0)
    set_inventory_value(BRAIN_AGENT_ID, "blackboard:target_pos", (x,y))
    yield success

=== ai_lifeform_move_to_idle_pos
metadata: ``` yaml
```
    idle_pos = get_inventory_value(BRAIN_AGENT_ID, "blackboard:idle_pos")
    yield fail if idle_pos is None
    set_inventory_value(BRAIN_AGENT_ID, "blackboard:target_pos", idle_pos)
    # Keep going
    yield success

=== ai_lifeform_move_to_location
metadata: ``` yaml
```
    _pos = get_inventory_value(BRAIN_AGENT_ID, "blackboard:target_pos")
    prev_pos = get_inventory_value(BRAIN_AGENT_ID, "blackboard:prev_target_pos")
    yield fail if _pos is None
    # Keep going
    yield success if _pos == prev_pos
    speed = grid_calc_speed(BRAIN_AGENT_ID)
    BRAIN_AGENT.set_inventory_value("idle_room", None)
    set_inventory_value(BRAIN_AGENT_ID, "blackboard:prev_target_pos", _pos)
    grid_target_pos(BRAIN_AGENT_ID, _pos[0], _pos[1], speed)
    grid_damcons_detailed_status(BRAIN_AGENT_ID, f"Heading to location {_pos[0]},{_pos[1]}", "blue", 3)
    yield success


=== ai_idle_at_room
metadata: ``` yaml
room: __damaged__
upgrade: ai_fix_damage
idle_time: 60
hp_speed_up: False
```
    last_room_id = BRAIN_AGENT.get_inventory_value("idle_room", None)
    current_room_ids = BRAIN_AGENT.get_inventory_value("current_rooms", set())
    boost_here = current_room_ids & role(room)
    # If not in previous room
    if last_room_id not in boost_here:
        yield fail
    elapsed = get_counter_elapsed_seconds(BRAIN_AGENT_ID, "idle_boost_counter")
    this_room = list(boost_here)
    yield fail if len(this_room) != 1
    this_room = this_room[0]
    # Set the idle_room
    BRAIN_AGENT.set_inventory_value("idle_room", this_room)
    # Start Idling
    if elapsed is None:
        start_counter("idle_boost_counter")
        yield success
    # continue idling
    target_time = idle_time
    if hp_speed_up:
        hp = BRAIN_AGENT.get_inventory_value("HP", 1)
        target_time /= hp
    # Success but keep running
    yield success if elapsed < target
    # OK we reached the idle_time
    task_schedule(upgrade, data={"AGENT_ID": BRAIN_AGENT_ID, "ROOM_ID": this_room, "type": room })
    yield success



=== ai_clear_idle_at_room
" used after checking all idle 
metadata: ``` yaml
```
    last_room_id = BRAIN_AGENT.set_inventory_value("idle_room", None)
    # yield fail 
    yield fail

