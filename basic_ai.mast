import common_docking.py
import fleet.py

#
# route spawn will call the specify label when something is spawned
# This allows the system to test what type of item it is
# typically using roles or other attributes
#
# NOTE: More than one route spawn can exist
#
route_spawn(handle_route_spawn)
build_task = None
#
# The route_spawn label is the entry point 
# it examines the SPAWNED_ID to either
# jump to another label proper for that item
# or END which stops running this task/flow 
#
========== handle_route_spawn =========

#
# AI for the player is the docking logic
#
jump ai_player if has_role(SPAWNED_ID, "__player__")
jump ai_task_friendly if has_roles(SPAWNED_ID, "tsn, friendly")
jump spawn_task_station if has_roles(SPAWNED_ID, "tsn, station")
jump raider_start if has_role(SPAWNED_ID, "raider")
#jump ai_fighter if has_roles(SPAWNED_ID, "tsn,fighter")

#### ELSE don't run a task
->END

=====  ai_player =====

#
# For now put on a fighter
#
hangar_fighter_spawn(SPAWNED_ID, "tsn")
#
# Create the interior for the ship, defined in grid_ai
#

task_schedule(spawn_grid_objects)
#
# The remaining AI for the player is docking
#

schedule_player_docking(SPAWNED_ID, difficulty)
#
# With other tasks started end this one
#
->END


====== raider_start ======
# add a taunt trait

#
# Select 3 taunts
#
race = get_race(SPAWNED_ID)
jump task_npc_targeting if race is None


this_taunt_data = random.sample(taunt_data[race], 3)
set_inventory_value(SPAWNED_ID, "taunt_data", this_taunt_data)
set_inventory_value(SPAWNED_ID, "taunt_trait", random.randint(0,2))

## falls through # jump task_npc_targeting

#
# This is for enemy AI
# For now this is in priority
#  - if surrendered go back to the spawn point
#  - a player ship that comms enraged
#  - a player that is withing 2000
#  - or a stations
#
========== task_npc_targeting === 

scanned = get_inventory_value(SPAWNED_ID, "SCANNED")
surrendered = has_role(SPAWNED_ID, "surrendered")
#if surrendered:
#    so = to_object(SPAWNED_ID)
#    target_pos(SPAWNED_ID, so.spawn_pos.x, so.spawn_pos.y, so.spawn_pos.z)
    # TODO: When it reaches spawn_pos tally and remove
#    ->END
#
# Auto scan: If you can see it you get the initial scan
# Auto scan: If you can see it you get the initial scan
# This is naive and assume players are on one side
#
if not scanned: 
    should_scan = closest(SPAWNED_ID, role("PlayerShip"), 5000)
    if should_scan is not None:
        follow_route_science_select(should_scan, SPAWNED_ID)

#fleet_obj = closest(SPAWNED_ID, role("fleet") & role(get_side(SPAWNED_ID)), 40000)

#print("making a raider.")

# brute force find closest fleet ----------------------------------------
best_fleet = None
my_pos = Vec3(get_pos(SPAWNED_ID))
best_dist = 3000
fleet_list = to_object_list(role("fleet"))# & role("raider")) #role(get_side(SPAWNED_ID)))
print(f"finded closest fleet: {len(fleet_list)} fleets checked")
for e in fleet_list:
    diff = my_pos - Vec3(e.position)
    distance = diff.length()
    if best_dist > distance:
        best_dist = distance
        best_fleet = e

fleet_obj = best_fleet

if fleet_obj is None:
#    print("fleet not found!")
    # okay, I need to make a fleet for myself here
    fleet_obj = fleet_spawn(my_pos, "RaiderFleet") #get_side(SPAWNED_ID))
    print(f"new fleet_obj = {fleet_obj} {fleet_obj.position.x} {fleet_obj.position.y} {fleet_obj.position.z} ")

# link to this fleet
set_inventory_value(SPAWNED_ID, "my_fleet_id", fleet_obj.id)
link(fleet_obj.id,"ship_list", SPAWNED_ID)
# move me to fleet
set_pos(SPAWNED_ID, fleet_obj.position)

-> END


#
# Call this logic again in 5 seconds
#
#await delay_sim(seconds=5)
#-> task_npc_targeting



#
# AI for friendly tsn ships (not citizen ships)
#
========== ai_task_friendly ===== 

#
# Comms can give orders to attack a target (or approach another friendly) 
#
the_target = get_inventory_value(SPAWNED_ID, "TARGET_ID", None)

scanned = get_inventory_value(SPAWNED_ID, "SCANNED")
#
# This is naive and assume players are on one side
#
if not scanned: 
    should_scan = closest(SPAWNED_ID, role("PlayerShip"))
    if should_scan is not None:
        follow_route_science_select(should_scan, SPAWNED_ID)

#
# Only shoot raiders
#            
if the_target is not None:
    shoot = has_role(the_target, "raider")

    distance = sbs.distance_id(SPAWNED_ID,to_id(the_target))
    throt = 1
    if distance < 500:
        throt = 0


    target(SPAWNED_ID, the_target, shoot, throt)

#
# call this logic every 5 seconds
#
await delay_sim(seconds=5)
-> ai_task_friendly

================ spawn_task_station ================= 

#
# All stations start building homing, just us any player
# Build task needs a player to talk to
#
my_players = role("__player__") & role("tsn")
->END if len(my_players)==0
ship_id = next(iter(my_players))
station_id = SPAWNED_ID

torpedo_build_type = sbs.TORPEDO.HOMING
build_time = 3*60
task_cancel(build_task) 
build_task = task_schedule(task_station_building)

scanned = get_inventory_value(SPAWNED_ID, "SCANNED")
#
# This is naive and assume players are on one side
#
if not scanned: 
    should_scan = closest(SPAWNED_ID, role("PlayerShip"))
    if should_scan is not None:
        follow_route_science_select(should_scan, SPAWNED_ID)


eo = to_engine_object(station_id)
_pos = eo.pos

#_pos.y += 300

for x in range(random.randint(1,3)):
    hangar_random_craft_spawn(station_id, "tsn")


-> END
