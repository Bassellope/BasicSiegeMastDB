import common_docking.py
import fleet.py

#
# route spawn will call the specify label when something is spawned
# This allows the system to test what type of item it is
# typically using roles or other attributes
#
# NOTE: More than one route spawn can exist
#
route_spawn(handle_route_spawn)
build_task = None
#
# The route_spawn label is the entry point 
# it examines the SPAWNED_ID to either
# jump to another label proper for that item
# or END which stops running this task/flow 
#
========== handle_route_spawn =========

#
# AI for the player is the docking logic
#
if has_role(SPAWNED_ID, "elite"):
    task_schedule(handle_elite_abilities)

jump ai_player if has_role(SPAWNED_ID, "__player__")
jump ai_task_friendly if has_roles(SPAWNED_ID, "tsn, friendly")
jump spawn_task_station if has_roles(SPAWNED_ID, "tsn, station")
jump raider_start if has_role(SPAWNED_ID, "raider")
#jump ai_fighter if has_roles(SPAWNED_ID, "tsn,fighter")

#### ELSE don't run a task
->END

=====  ai_player =====

#
# For now put on a fighter
#
hangar_fighter_spawn(SPAWNED_ID, "tsn")
#
# Create the interior for the ship, defined in grid_ai
#

task_schedule(spawn_grid_objects)
#
# The remaining AI for the player is docking
#

schedule_player_docking(SPAWNED_ID, difficulty)
#
# With other tasks started end this one
#
->END


====== raider_start ======
# add a taunt trait

#
# Select 3 taunts
#
race = get_race(SPAWNED_ID)
jump task_npc_targeting if race is None


this_taunt_data = random.sample(taunt_data[race], 3)
set_inventory_value(SPAWNED_ID, "taunt_data", this_taunt_data)
set_inventory_value(SPAWNED_ID, "taunt_trait", random.randint(0,2))

## falls through # jump task_npc_targeting

#
# This is for enemy AI
# For now this is in priority
#  - if surrendered go back to the spawn point
#  - a player ship that comms enraged
#  - a player that is withing 2000
#  - or a stations
#
========== task_npc_targeting === 

scanned = get_inventory_value(SPAWNED_ID, "SCANNED")
surrendered = has_role(SPAWNED_ID, "surrendered")
#if surrendered:
#    so = to_object(SPAWNED_ID)
#    target_pos(SPAWNED_ID, so.spawn_pos.x, so.spawn_pos.y, so.spawn_pos.z)
    # TODO: When it reaches spawn_pos tally and remove
#    ->END
#
# Auto scan: If you can see it you get the initial scan
# Auto scan: If you can see it you get the initial scan
# This is naive and assume players are on one side
#
if not scanned: 
    should_scan = closest(SPAWNED_ID, role("PlayerShip"), 5000)
    if should_scan is not None:
        follow_route_science_select(should_scan, SPAWNED_ID)



-> END


#
# Call this logic again in 5 seconds
#
#await delay_sim(seconds=5)
#-> task_npc_targeting



#
# AI for friendly tsn ships (not citizen ships)
#
========== ai_task_friendly ===== 

#
# Comms can give orders to attack a target (or approach another friendly) 
#
the_target = get_inventory_value(SPAWNED_ID, "TARGET_ID", None)

scanned = get_inventory_value(SPAWNED_ID, "SCANNED")
#
# This is naive and assume players are on one side
#
if not scanned: 
    should_scan = closest(SPAWNED_ID, role("PlayerShip"))
    if should_scan is not None:
        follow_route_science_select(should_scan, SPAWNED_ID)

#
# Only shoot raiders
#            
if the_target is not None:
    shoot = has_role(the_target, "raider")

    distance = sbs.distance_id(SPAWNED_ID,to_id(the_target))
    throt = 1
    if distance < 500:
        throt = 0


    target(SPAWNED_ID, the_target, shoot, throt)

#
# call this logic every 5 seconds
#
await delay_sim(seconds=5)
-> ai_task_friendly

================ spawn_task_station ================= 

#
# All stations start building homing, just us any player
# Build task needs a player to talk to
#
my_players = role("__player__") & role("tsn")
->END if len(my_players)==0
ship_id = next(iter(my_players))
station_id = SPAWNED_ID

torpedo_build_type = sbs.TORPEDO.HOMING
build_time = 3*60
task_cancel(build_task) 
build_task = task_schedule(task_station_building)

scanned = get_inventory_value(SPAWNED_ID, "SCANNED")
#
# This is naive and assume players are on one side
#
if not scanned: 
    should_scan = closest(SPAWNED_ID, role("PlayerShip"))
    if should_scan is not None:
        follow_route_science_select(should_scan, SPAWNED_ID)


eo = to_engine_object(station_id)
_pos = eo.pos

#_pos.y += 300

for x in range(random.randint(1,3)):
    hangar_random_craft_spawn(station_id, "tsn")


-> END


========== handle_elite_abilities =========

so = to_object(SPAWNED_ID)
if None == so:
    -> END

all_abilities = get_shared_variable("elite_abilities")
abilities = []

for ab in all_abilities:
    if has_role(SPAWNED_ID, ab):
        abilities.append(ab)
ab = random.choice(abilities)

#
# This will run a sequence based on the elite type
# awaiting will wait until the sequence is finished
#
if ab == "elite_cloak":
    await bt_seq(elite_cloak_start,elite_wait, elite_cloak_clear, elite_wait, data={"BT_ID": SPAWNED_ID})
elif ab == "elite_jump_forward":
    await bt_seq(elite_jump_forward,elite_wait, data={"BT_ID": SPAWNED_ID})
elif ab == "elite_jump_back":
    await bt_seq(elite_jump_back,elite_wait, data={"BT_ID": SPAWNED_ID})
else:
    await delay_sim(seconds=30)

-> handle_elite_abilities


========== elite_wait =========
await delay_sim(seconds=30)
yield SUCCESS

==== elite_cloak_start ======
old_art_id = get_inventory_value(BT_ID, "visible_art_id")
yield FAIL if None != old_art_id #if I'm currently cloaked

set_inventory_value(BT_ID, "visible_art_id", so.art_id) # remember art id that's visible
so.set_art_id("invisible") # cloaking!
sim.force_update_to_clients(BT_ID)
sbs.particle_on(so.engine_object, "align:False; offset:0,0,200;color:pink; lifespan:50; image_cell:9; size:10; speed: 2; count:1000")
yield SUCCESS

==== elite_cloak_clear ======

so = to_object(BT_ID)
old_art_id = get_inventory_value(BT_ID, "visible_art_id")
#log(f"uncloak to {old_art_id}", "elites")
so.set_art_id(old_art_id)
sim.force_update_to_clients(BT_ID)
set_inventory_value(BT_ID, "visible_art_id", None)
sbs.particle_on(so.engine_object, "align:False; offset:0,0,200;color:pink; lifespan:50; image_cell:9; size:10; speed: 2; count:1000")

yield SUCCESS


==== elite_jump_forward ======
so = to_object(BT_ID)
yield FAIL if so is None

eo = to_engine_object(BT_ID)
_pos_eo = eo.pos
_forward = Vec3(eo.forward_vector())
_pos = Vec3(_pos_eo) + (_forward * 300)

so.pos = _pos
sbs.particle_at(_pos_eo, "align:False; offset:0,0,200;color:blue; lifespan:50; image_cell:9; size:10; speed: 2; count:1000")

yield SUCCESS

==== elite_jump_back ======
so = to_object(BT_ID)
yield FAIL if so is None

eo = to_engine_object(BT_ID)
_pos_eo = eo.pos
_forward = Vec3(eo.forward_vector())
_pos = Vec3(_pos_eo) + (_forward * -300)

so.pos = _pos
sbs.particle_at(_pos_eo, "align:False; offset:0,0,200;color:blue; lifespan:50; image_cell:9; size:10; speed: 2; count:1000")

yield SUCCESS
