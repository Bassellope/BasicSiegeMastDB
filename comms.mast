# This code is for Communications Console to select
# and communicate with space objects, grid objects,
# or any other objects.

import comms/friendly_give_orders.mast
import comms/station_weapon_building.mast
import comms/enemy_taunt.mast
import comms/enemy_surrender.mast
import comms/priority_docking.mast


# route_select_comms("route_comms_await")


#############################################
# Handle logic to present buttons for player Comms to an agent
# e.g. raider, friendly ship, station, asteroid, etc..
# This code will run the first time the Comms player selects each
# specific agent that Comms might communicate with.
#############################################

//select/comms
# Start new dialog thread for a player ship with agent.
# Each player ship will have its own thread for comms.
# This enables each ship to have a unique dialog path
# of conversation with each agent.
if COMMS_SELECTED_ID == COMMS_ORIGIN_ID:
    # This is the same ship
    jump internal_comms
elif has_roles(COMMS_SELECTED_ID, "tsn, Station"):
# The station is already building something. This line is is needed so
# the Comms task has a value initialized for the conversation. 
    # jump station_comms
    await comms()
elif has_roles(COMMS_SELECTED_ID, "tsn, friendly"):
    await comms()
elif has_roles(COMMS_SELECTED_ID, 'Station'):
    jump comms_enemy_station
elif has_role(COMMS_SELECTED_ID, "Raider"):
    # jump npc_comms
    await comms()

# Default clear comms Present static
comms_info("static")

=$raider red, white

//comms if has_roles(COMMS_SELECTED_ID, 'Station')
comms_id = to_object(COMMS_ORIGIN_ID).comms_id
+ "Hail and rain":
    <<[$raider] Hail
        " {comms_id}! We will destroy you, disgusting Terran scum!", title="Hail", title_color=raider_color

+ "You're Ugly":
    <<[red, white] Taunt
        " You are a foolish Terran, {comms_id}.  Taunting enemy stations is not currently implemented.
+ "Surrender now":
    <<[red, white] Surrender Denied
        " Eat my soiled undergarments, {comms_id}.



================ internal_comms ==================
#
# faces for the departments are defined in grid_ai.mast 
# since they are associated with rooms on tjhe grid
#

================ internal_comms_loop ==================
#
# Shows button color, face and title overrides
#
await comms():
    + "Sickbay" color "blue":
        crew_size = get_inventory_value(COMMS_ORIGIN_ID, "crew_size", 0)
        dead = get_inventory_value(COMMS_ORIGIN_ID, "casulaty_count", 0)
        comms_receive_internal(f"Currently we have {crew_size} healthy crew members and {dead} casualties", from_name="sickbay", title="crew health", title_color="blue")
    + "Security" color "red":
        comms_receive_internal("All secure", from_name="security", title="Security update",   title_color="red")
    + "Exobiology" color "green":
        comms_receive_internal("Testing running, one moment", from_name="exobiology", title="Potential biohazard", title_color="green")
        # It is best to schedule delayed responses so the comms buttons are not stalled
        task_schedule(test_finished)
    + "counselor" color "purple":
        comms_receive_internal("Something is disturbing the crew", from_name="counselor", title="crew update", title_color="purple")
        #
        # but you can delay comms, There will be no buttons during this delay
        #
        await delay_sim(seconds=3)
        comms_receive_internal("Things feel like they are getting worse", from_name="counselor", title="crew update", title_color="purple")

-> internal_comms_loop

====== test_finished ======
# This is a new task to delay the response of the test results
# COMMS variables should migrate to this task

await delay_sim(seconds=2)
comms_receive_internal( "test results finished. Tell the captain we do not have a pathogen.", from_name="exobiology", title="biohazard test results", title_color= "green")
->END


