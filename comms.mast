route comms select route_comms

#
# Load data from a file
#
taunt_data = load_json_data(get_mission_dir_filename("taunts.json"))

#############################################
# Create task to player to raider comms and station comms
#############################################

=========== route_comms  ========
# start the comms for the players and stations
# Each ship will have its of thread for comms
# this enables them to have a unique path

if COMMS_SELECTED_ID == COMMS_ORIGIN_ID:
    # This is the same ship
    jump internal_comms
elif has_roles(COMMS_SELECTED_ID, "tsn, Station"):
    torpedo_build_type = sbs.TORPEDO.HOMING
    jump station_comms
elif has_roles(COMMS_SELECTED_ID, "tsn, friendly"):
    jump friendly_comms
elif has_roles(COMMS_SELECTED_ID, 'Station'):
    jump comms_enemy_station
elif has_role(COMMS_SELECTED_ID, "Raider"):
    jump npc_comms
end_if

# Default clear comms Present static
comms_info "static"

->END

===== friendly_comms =======

await comms:
    + "Give Orders":
        comms_client_id = EVENT.client_id
        reroute client comms_client_id friendly_give_orders
end_await
jump  friendly_comms



=============== station_comms ===============
station_id = COMMS_SELECTED_ID
ship_id = COMMS_ORIGIN_ID
station_obj = to_object(COMMS_SELECTED_ID)

comms_id = to_object(COMMS_ORIGIN_ID).name

#   HOMING : 0, NUKE : 1, EMP : 2, MINE : 3

_build_times = ~~{
    "command": {"build_times": [2, 5, 3, 2]},
    "civil": {"build_times": [6, 20, 10, 8 ]},
    "industry": {"build_times": [1, 4, 2, 2 ]},
    "science": {"build_times": [6, 20, 10, 8 ]},
    "default": {"build_times": [3, 10, 5, 4 ]}
}~~
artid = station_obj.art_id

build_times = _build_times["default"]["build_times"]
for k in _build_times:
    if k in artid:
        build_times = _build_times[k]["build_times"]
        break
    end_if
next k



await comms:
    + "Hail":
        homing = get_engine_data(COMMS_SELECTED_ID, "torpedo_count", sbs.TORPEDO.HOMING)
        nuke = get_engine_data(COMMS_SELECTED_ID, "torpedo_count", sbs.TORPEDO.NUKE)
        emp = get_engine_data(COMMS_SELECTED_ID, "torpedo_count", sbs.TORPEDO.EMP)
        mine = get_engine_data(COMMS_SELECTED_ID, "torpedo_count", sbs.TORPEDO.MINE)
        build_time = format_time_remaining(COMMS_SELECTED_ID, "build_time")

        ~~comms_receive(f"""Hello, {comms_id}.  We stand ready to assist.

You have full docking privileges.

{torpedo_build_type} in production. Completion in {build_time}

{"type":<10}{"ready": >5}{"time to produce": >20}
{"Homing": <10}{homing: >5}{"": >16}{build_times[sbs.TORPEDO.HOMING.value]}:00 
{"Nuke": <10}{nuke: >5}{"": >16}{build_times[sbs.TORPEDO.NUKE.value]}:00
{"EMP": <10}{emp: >5}{"": >16}{build_times[sbs.TORPEDO.EMP.value]}:00
{"Mine": <10}{mine: >5}{"": >16}{build_times[sbs.TORPEDO.MINE.value]}:00

""")~~
    + "Now Docking":
        do comms_receive(f"""We read you, {comms_id}.  We're standing by for expedited docking.^""")

    + "Build Homing": 
        do comms_receive(f"""We read you, {comms_id}.  We will focus on homing production.^""")
        torpedo_build_type = sbs.TORPEDO.HOMING
        build_time = 3*60
        cancel build_task
        var build_task =>  task_station_building

    + "Build Nuke":
        do comms_receive(f"""We read you, {comms_id}.  We will focus on nuke production.^""")
        torpedo_build_type= sbs.TORPEDO.NUKE
        build_time = 10*60
        cancel build_task
        var build_task => task_station_building

    + "Build Emp":
        do comms_receive(f"""We read you, {comms_id}.  We will focus on EMP production.^""")
        torpedo_build_type= sbs.TORPEDO.EMP
        build_time = 5*60
        cancel build_task
        var build_task => task_station_building
    + "Build Mine":
        do comms_receive(f"""We read you, {comms_id}.  We will focus on MINE production.^""")
        torpedo_build_type = sbs.TORPEDO.MINE
        build_time = 4*60
        cancel build_task
        var build_task => task_station_building
end_await
-> station_comms

=== task_station_building ===
COMMS_ORIGIN_ID = ship_id
COMMS_SELECTED_ID = station_id

comms_id = to_object(ship_id).name
do set_timer(station_id, "build_time", seconds = build_time)
# do print(f"build time = {build_time}")

await until is_timer_finished(station_id, "build_time"):
#pass
end_await 
do clear_timer(station_id, "build_time")
self = to_object(station_id)

#
# If the station was destroyed  END
#
->END if self is None

cur_count = get_engine_data(station_id, "torpedo_count", torpedo_build_type)
do set_engine_data(station_id, "torpedo_count", cur_count+1, torpedo_build_type)



do comms_receive(f"""{comms_id}. {torpedo_build_type} Production complete.""")
->task_station_building


======== comms_enemy_station ====== 
comms_id = to_object(COMMS_ORIGIN_ID).comms_id
await comms:
    + "Hail":
        do comms_receive(f"{comms_id}! We will destroy you, disgusting Terran scum!")
    + "You're Ugly":
        do comms_receive(f"""You are a foolish Terran, {comms_id}.  Taunting enemy stations is not currently implemented.^""")
    + "Surrender now":
        do comms_receive(f"""Eat my soiled undergarments, {comms_id}.""")
end_await

-> comms_enemy_station


================ npc_comms ==================
comms_id = to_object(COMMS_ORIGIN_ID).comms_id
station_id = COMMS_SELECTED_ID
ship_id = COMMS_ORIGIN_ID
enrage_value=get_inventory_value(COMMS_SELECTED_ID, "enrage_target")

# Get the Secret Codecase timer, set hide_taunt and hide_surr to hide taunts if ship is surrendered, 
# but show Surrender button if sc_timer is active
sc_timer = get_inventory_value(COMMS_ORIGIN_ID, "sc_timer", 0)
hide_taunt = has_role(COMMS_SELECTED_ID, "surrendered")
hide_surr = (has_role(COMMS_SELECTED_ID, "never_surrender") and not sc_timer > 0) or has_role(COMMS_SELECTED_ID, "surrendered")

await comms:
    + "Hail":
        do comms_receive(f"Go away, {comms_id}! You talk too much!")
    + "Taunt" if enrage_value is None and not hide_taunt:
        # Navigate to sub Menu
        jump comms_taunts
    + "Surrender now" if not hide_surr:
        blob = to_blob(COMMS_SELECTED_ID)
        shield_count = blob.get("shield_count", 0)
        s_ratio = 100
        for s in range(shield_count):
            s_max = blob.get("shield_max_val", s )
            s_cur = blob.get("shield_val", s )
            s_ratio = min(s_cur/s_max, s_ratio)
        next s
# Secret Codecase, force surrender if active, otherwise check shield ratio
	if sc_timer > 0:
	    do comms_receive(f"""OK we give up, {comms_id}.""")
            do add_role(COMMS_SELECTED_ID, "surrendered")
            do game_stats["ships_surrender"] += 1
            do remove_role(COMMS_SELECTED_ID, "raider")
		    sc_timer = 0
		    do set_inventory_value(COMMS_ORIGIN_ID, "sc_timer", sc_timer )
		    do set_engine_data(COMMS_SELECTED_ID, "surrender_flag", 1)
        elif s_ratio < 0.09:
            if random.randint(1,6)<3:
                do comms_receive(f"""OK we give up, {comms_id}.""")
                do add_role(COMMS_SELECTED_ID, "surrendered")
                do game_stats["ships_surrender"] += 1
                do remove_role(COMMS_SELECTED_ID, "raider")

                do set_engine_data(COMMS_SELECTED_ID, "surrender_flag", 1)
            else:
                do comms_receive(f"""We will fight to our last breath!""")
                do add_role(COMMS_SELECTED_ID, "never_surrender")
            end_if
        elif s_ratio < 0.5:
            if random.randint(0,6)<=2:
                do comms_receive(f"""OK we give up, {comms_id}.""")
                do add_role(COMMS_SELECTED_ID, "surrendered")
                do remove_role(COMMS_SELECTED_ID, "raider")
                do set_engine_data(COMMS_SELECTED_ID, "surrender_flag", 1)
            else:
                do comms_receive(f"""We can still defeat you, {comms_id}! Prepare to die!""")
            end_if
        else:
            do comms_receive(f"""Go climb a tree, {comms_id}!""")
        end_if
        
end_await
jump npc_comms



================ comms_taunts ==================
#
# Present taunts
#
name = to_object(COMMS_ORIGIN_ID).name

this_taunt_data = get_inventory_value(COMMS_SELECTED_ID, "taunt_data")
#
# Skip if the loading of taunts failed
#
jump npc_comms if this_taunt_data is None

taunt_trait=get_inventory_value(COMMS_SELECTED_ID, "taunt_trait")

right_button = this_taunt_data[taunt_trait]['button']

await comms:
    + "{data['button']}" for data in this_taunt_data:
        # Need to format the data
       msg = data['transmit']
       msg = "{msg}"
       do comms_transmit(f"{msg}")
        # failure
        if right_button != data['button']:
            msg = "{data['failure']}"
            do comms_receive(f"{msg}")
            do set_inventory_value(COMMS_SELECTED_ID, "enrage_target", None)
            do clear_timer(COMMS_SELECTED_ID, "enrage_timer")
        # success
        else:
            msg = "{data['success']}"
            do comms_receive(f"{msg}")
            do set_inventory_value(COMMS_SELECTED_ID, "enrage_target",COMMS_ORIGIN_ID)
            do set_timer(COMMS_SELECTED_ID, "enrage_timer", minutes=2)
        end_if
    + "Back":
        -> npc_comms    
end_await

# Jump back to main comms menu
-> npc_comms



================ internal_comms ==================
#
# Setup faces for the departments
#
do set_inventory_value(COMMS_ORIGIN_ID, "face_sickbay", random_terran())
do set_inventory_value(COMMS_ORIGIN_ID, "face_exobiology", random_terran())
do set_inventory_value(COMMS_ORIGIN_ID, "face_counselor", random_terran())
do set_inventory_value(COMMS_ORIGIN_ID, "face_security",  random_terran())


================ internal_comms_loop ==================
#
# Shows button color, face and title overrides
#
await comms:
    + "Sickbay" color "blue":
        do comms_receive_internal("The crew health is great!", from_name="sickbay", color="blue")
    + "Security" color "red":
        do comms_receive_internal("All secure", from_name="security",   color="red")
    + "Exobiology" color "green":
        do comms_receive_internal("Testing running, one moment", from_name="exobiology", color="green")
        # It is best to schedule delayed responses so the comms buttons are not stalled
        schedule test_finished
    + "counselor" color "cyan":
        do comms_receive_internal("Something is disturbing the crew", from_name="counselor", color="cyan")
        #
        # but you can delay comms, There will be no buttons during this delay
        #
        delay sim 3s
        do comms_receive_internal("Things feel like they are getting worse", from_name="counselor", color="cyan")
end_await
-> internal_comms_loop

====== test_finished ======
# This is a new task to delay the response of the test results
# COMMS variables should migrate to this task

delay sim 2s
do comms_receive_internal( "test results finished. Tell the captain we have a pathogen. This could be bad.", from_name="exobiology", color= "green")
->END


