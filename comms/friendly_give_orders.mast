
import give_orders.py

# Example defining a color theme
# Which is just a list of colors
=$xmas green,red


//enable/comms if has_roles(COMMS_SELECTED_ID, "civ, friendly")

#
# This is an example of how to create an overridable button, but it is not used
# By setting the weight to 0
# 
# //comms
#     + !0 "Hail":
#         comms_receive("Default hail")



//comms if has_roles(COMMS_SELECTED_ID, "civ, friendly") 
    + "Hail":
        obj_ids = linked_to(COMMS_SELECTED_ID, "OBJECTIVE")
        yield success if len(obj_ids) == 0
        msg = "Current objective status\n"
        for obj_id in obj_ids:
            obj = to_object(obj_id)
            continue if obj is None
            detail = obj.get_inventory_value("desc")
            continue if detail is None
            if detail == "":
                detail = "Receiving new orders"
            msg += "    {detail}\n"
        comms_receive(msg)



//enable/comms if has_roles(COMMS_SELECTED_ID, "prefab_npc_defender")


//comms if has_roles(COMMS_SELECTED_ID, "prefab_npc_defender") 
    + "Hail":
        obj_ids = linked_to(COMMS_SELECTED_ID, "OBJECTIVE")
        yield success if len(obj_ids) == 0
        msg = "Current objective status\n"
        for obj_id in obj_ids:
            obj = to_object(obj_id)
            continue if obj is None
            detail = obj.get_inventory_value("desc")
            continue if detail is None
            if detail == "":
                detail = "Receiving new orders"
            msg += "    {detail}\n"
        comms_receive(msg)
    + "Give Orders" //comms/give_orders


//comms/give_orders if get_inventory_value(COMMS_SELECTED_ID, "give_orders_type") is not None
    #has_objective = 
    order = ""
    + "Back"  //comms/

    label_type = get_inventory_value(COMMS_SELECTED_ID, "give_orders_type")

    orders = labels_get_type(label_type)
    for order in orders:
        display_name = order.get_inventory_value("display_name", order.name)
        + "{display_name}" {"order": order}:
            cur_objective = order
            comms_navigate("//comms/confirm_orders")

//comms/confirm_orders
    # Present the properties panel
    gui_sub_task_schedule(handle_properties_defender_orders)
    

    + "Back" //comms/give_orders
    + "Execute" carry_out_orders {"cur_objective": cur_objective}

    

=== carry_out_orders 
    #
    # The Alt ship should be the selected id at this point
    # But can get confused when disconnecting or new connection 
    #
    #
    alt_ship= COMMS_SELECTED_ID

    ->END if not alt_ship or alt_ship == 0
    set_inventory_value(EVENT.client_id, "2dview_alt_ship", alt_ship)
    alt_ship_obj = to_object(alt_ship)
    on_ship =  sbs.get_ship_of_client(EVENT.client_id)
    ->END if alt_ship_obj is None

    target_point = get_inventory_value(COMMS_SELECTED_ID, "ORDERS_SELECTED_POINT", None)
    target_object = to_object(get_inventory_value(COMMS_SELECTED_ID, "ORDERS_SELECTED_OBJECT", None))
    if target_object is not None:
        target_point = None

    message = "Your order were unclear {COMMS_ORIGIN.name} - please confirm. I didn't get the area for the order."
    title = "Orders unclear"

    # Clear things

    
    set_inventory_value(on_ship, "ORDERS_SELECTED_POINT", None)
    set_inventory_value(on_ship, "ORDERS_SELECTED_OBJECT", None)
    nav = get_inventory_value(on_ship, "ORDERS_SELECTED_NAV", None)
    if nav:
        sim.delete_navpoint_by_id(nav)
        set_inventory_value(on_ship, "ORDERS_SELECTED_NAV", None)

    # For now only one order
    set_inventory_value(alt_ship, "ORDERS_SELECTED_POINT", None)
    set_inventory_value(alt_ship, "ORDERS_SELECTED_OBJECT", None)
    nav = get_inventory_value(alt_ship, "ORDERS_NAV", None)
    if nav:
        sim.delete_navpoint_by_id(nav)
        set_inventory_value(alt_ship, "ORDERS_NAV", None)

    # set_inventory_value(COMMS_SELECTED_ID, "ORDERS_SELECTED_POINT", None)
    objective_clear(COMMS_SELECTED_ID)
    #print("give orders on alt ship {cur_objective}")
    objective_add(alt_ship, cur_objective, {"objective_target_point": target_point, "objective_target": to_id(target_object)})

    ######## The rest of this should be in the cur_objective
    ORDER = cur_objective.get_inventory_value("display_name", cur_objective.name)
    ORDER_COLOR = "#040"
    if target_point is not None:
        message = "Heading to designated waypoint to {ORDER}"
        title = "Orders accepted"
    elif target_object is not None:
        message = "Heading to {target_object.name}"
        title = "Orders accepted"
    elif ORDER == "Full Stop":
        message = "awaiting further orders"
        title = ORDER
    
        
    if message is not None:
        comms_receive(message, title, color="white", title_color="cyan")

    comms_navigate("")
    yield success


//shared/signal/game_started
    task_schedule(update_nav_area_for_object)
    ->END

=== update_nav_area_for_object
" This is a task to update any nav areas marking
" a moving target
--- repeat
    await delay_sim(5)
    have_nav = has_inventory("ORDERS_SELECTED_OBJECT")
    for ship in have_nav:
        continue if ship == 0
        alt_ship_obj = to_object(ship)
        continue if alt_ship_obj is None
        continue if alt_ship_obj == 0
        on_ship = ship
        alt_ship = ship
        #
        # If this is a player ship and is not following
        # skip
        if has_role(on_ship, "__player__"):
            alt_ship = get_inventory_value(on_ship, "2dview_alt_ship", None)
            alt_ship_obj = to_object(alt_ship)
            continue if alt_ship_obj is None
                
        #
        #
        # OK Lets update any ship that got this far
        # If the target ship still exists
        obj_id = get_inventory_value(ship,"ORDERS_SELECTED_OBJECT")
        continue if obj_id is None or obj_id == 0
        obj = to_object(obj_id)
        continue if obj is None
        pos = Vec3(obj.pos)
        size = 1000
        nav_color = "#044"
        nav_name = "^^^^^^Order Object^for {alt_ship_obj.name}"

        x = pos.x
        y = pos.y
        z = pos.z

        #
        # This is copy pasted code from the //focus/comms2d
        # so switch the  variable to match
        this_ship = ship
        nav_id = get_inventory_value(this_ship, "ORDERS_SELECTED_NAV", None)
        if nav_id is not None:
            sim.delete_navpoint_by_id(nav_id)
        y = z
        nav_id = sim.add_navarea(x-size, y-size,x+size, y-size,x-size, y+size,x+size, y+size, nav_name, nav_color)
        #nav_id = sim.add_navpoint(x, y, z, nav_name, "#eee")
        nav = sim.get_navpoint_by_id(nav_id)
        nav.visibleToShip = this_ship
        set_inventory_value(this_ship, "ORDERS_SELECTED_NAV", nav_id)
    jump repeat


//focus/comms2d if has_role(COMMS2D_ORIGIN_ID, "__player__")
    alt_ship = get_inventory_value(EVENT.client_id, "2dview_alt_ship", 0)
    on_ship =  sbs.get_ship_of_client(EVENT.client_id)
    #set_inventory_value(on_ship, "2dview_alt_ship", 0)
    #set_inventory_value(on_ship, "ORDERS_SELECTED_OBJECT", None)
    do_select = get_inventory_value(EVENT.client_id, "2d_select", False)
    if do_select and COMMS2D_SELECTED_ID != 0:
        if alt_ship != COMMS2D_SELECTED_ID:
            follow_route_select_comms(on_ship, COMMS2D_SELECTED_ID)
            alt_ship = COMMS2D_SELECTED_ID
            # Do I need to Follow Selection? Yes for Buttons

    comms_set_2dview_focus(EVENT.client_id, alt_ship, EVENT)
    ->END



//focus/comms if not has_role(COMMS_SELECTED_ID, 'admiral')
    ->END if COMMS_SELECTED is None
    #
    #
    # Something else selected get out of give orders
    #
    comms_set_2dview_focus(EVENT.client_id, EVENT.selected_id)
    if COMMS_SELECTED.has_role('tsn'):
        ()[blue] "Unused"
            % ready
            % How can I help
            % Your orders
            % Yes, sir
    elif COMMS_SELECTED.has_role('raider'):
        ()[red] "Unused"
            % Piss off
            % Eat my beams
            % You shall perish
            % You gonna die

