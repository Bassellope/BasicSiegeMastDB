
route_focus_weapons("weapons_select_route")
route_focus_comms("stop_give_orders")
import give_orders.py


//enable/comms if has_roles(COMMS_SELECTED_ID, "tsn, friendly")

# Example defining a color theme
# Which is just a list of colors
=$xmas green,red

//comms if has_roles(COMMS_SELECTED_ID, "tsn, friendly")
+ "Give Orders" //comms/give_orders


//comms/give_orders if has_roles(COMMS_SELECTED_ID, "tsn, friendly")
+ "Protect" friendly_give_orders_protect
+ "Attack"  friendly_give_orders_attack
+ "Patrol"  friendly_give_orders_patrol
+ "Cancel"  //comms/
+ "Random"  test_random
    
=== test_random
COMMS_ORIGIN.set_inventory_value("test", "HELLO")
<<[$xmas] Trouble
    % {COMMS_ORIGIN.name} we are desperate need of help
    " Our engines are offline {COMMS_ORIGIN["test"]}
    " we need your help fast
    % Engine trouble here
    " {COMMS_ORIGIN.name} Can you come and gives us a Jump
    " Jump drive that is eh he {COMMS_ORIGIN["test"]}
comms_navigate("")    
yield success

#
# Common way to back out of give orders
#
=== friendly_cancel_give_orders
comms_navigate("")
yield success

=== friendly_give_orders_protect
jump carry_out_orders

=== friendly_give_orders_attack
jump carry_out_orders

=== friendly_give_orders_patrol
jump carry_out_orders


=== carry_out_orders 
#
# This needs to use the brain system,
# but that needs work
#

target_id = get_weapons_selection(COMMS_SELECTED_ID)
target_point = get_inventory_value(COMMS_SELECTED_ID, "WEAPONS_SELECTED_POINT", None)
#print("GIVE ORDERS {target_id} {target_point}")
message = "Your order were unclear {COMMS_ORIGIN.name} - please confirm"
title = "Orders unclear"
if target_id is not None and target_id != 0:
    #print("GIVE ORDERS inner {target_id}")
    target_obj = to_object(target_id)
    if target_obj is not None:
        shoot = has_role(target_id, "raider")

        set_inventory_value(COMMS_SELECTED_ID, "TARGET_ID", target_id)
        if shoot:
            message = "OK {COMMS_ORIGIN.name} - going to attack {target_obj.name}"
            title = "Orders accepted"
        else:
            message = "OK {COMMS_ORIGIN.name} - going to rendezvous with {target_obj.name}"
            title = "Orders accepted"
        
            
        target(COMMS_SELECTED_ID, target_id, shoot)
        
if target_point is not None:
    # print("GIVE ORDERS")
    message = "Heading to designated waypoint"
    title = "Orders accepted"

    target_pos(COMMS_SELECTED_ID, target_point.x, target_point.y, target_point.z )

if message is not None:
    comms_receive(message, title, color="white", title_color="cyan")

comms_navigate("")
yield success


========== weapons_select_route ========
#
# Handles the 2dView selection for friendlies
#

# this should focus on the give client
alt_ship = get_inventory_value(EVENT.client_id, "2dview_alt_ship", 0)
on_ship = get_inventory_value(EVENT.client_id, "assigned_ship", 0)

->END if not alt_ship
->END if not has_role(alt_ship, "friendly")

nav = get_inventory_value(alt_ship, "WEAPONS_SELECTED_NAV", None)
if nav:
    sim.delete_navpoint_by_reference(nav)
    set_inventory_value(alt_ship, "WEAPONS_SELECTED_NAV", None)

# Handle initial clicks
if EVENT.selected_id != 0:
    set_inventory_value(alt_ship, "WEAPONS_SELECTED_POINT", None)
    set_inventory_value(alt_ship, "WEAPONS_SELECTED_ID", EVENT.selected_id)
else:
    set_inventory_value(alt_ship, "WEAPONS_SELECTED_POINT", Vec3(EVENT.source_point))
    set_inventory_value(alt_ship, "WEAPONS_SELECTED_ID", None)
    
    nav = sim.add_navpoint(EVENT.source_point.x,EVENT.source_point.y, EVENT.source_point.z, "goto", "white")
    ~~ nav.visibleToShip = alt_ship ~~
    set_inventory_value(alt_ship, "WEAPONS_SELECTED_NAV", nav)

#Done no point running more
->END

=== stop_give_orders

#
# Trying always focus on comms selection
#

##### Old code that only focuses in give orders
#
# Something else selected get out of give orders
#
nav_focus_id = EVENT.client_id
#alt_ship = get_inventory_value(nav_focus_id, "2dview_alt_ship", 0)
#->END if not alt_ship
#->END if not has_role(alt_ship, "friendly")

comms_set_2dview_focus(EVENT.client_id, EVENT.selected_id)
if COMMS_SELECTED.has_role('tsn'):
    ()[blue] Unused
        % ready
        % How can I help
        % Your orders
        % Yes, sir
elif COMMS_SELECTED.has_role('raider'):
    ()[red] Unused
        % Piss off
        % Eat my beams
        % You shall perish
        % You gonna die



    


#gui_reroute_client(nav_focus_id, "console_selected")

yield success




#############################################################
## Pay no attention below this
## its basically notes when I refactored comms 
## Needs to be removed after more RouteLabels are added


/*
comms_client_id = EVENT.client_id
alt_ship = get_inventory_value(comms_client_id, "2dview_alt_ship", 0)
jump friendly_cancel_give_orders if not alt_ship
jump friendly_cancel_give_orders if not has_role(alt_ship, "friendly")


alt_ship_target = get_weapons_selection(alt_ship)
jump friendly_cancel_give_orders if not alt_ship_target

t_obj = to_object(alt_ship_target)
if t_obj is not None:
    comms_receive(f"We will go and attack {t_obj.name}", title="Orders to attack", title_color="cyan")
    
    set_inventory_value(alt_ship, "BRAIN_ATTACK_ID", alt_ship_target)
    set_inventory_value(alt_ship, "BRAIN_LABEL", "brain_attack")
    await task_schedule(brain_assure_task, data={"brain_id": alt_ship})
else:
    comms_receive(f"Nothing to attack {alt_ship_target}", title="Orders to attack", title_color="cyan")

jump friendly_cancel_give_orders
*/



#
# This is mast now, but consider putting the library
# for a general purpose 'brain'
#
#
# Keep thinking
# Script can change the label that
# has the current thinking process
#
=== brain_assure_task
brain_task = get_inventory_value(brain_id, "BRAIN_TASK", None)
# Already has a brain
yield success  if brain_task
brain_task = task_schedule(brain_start)
set_inventory_value(brain_id, "BRAIN_TASK", brain_task)
set_inventory_value(brain_id, "BRAIN_LABEL", "brain_nop")
yield success

=== brain_start
brain_sub_task = sub_task_schedule(brain_nop)
last_thought = "brain_nop"
==== brain_loop
# Expect brain_id to be set
-> END if brain_id is None
noggin = to_object(brain_id)
-> END if noggin is None
# OK object still exists

brain_label = get_inventory_value(brain_id, "BRAIN_LABEL", None)
print(f"BRAIN {brain_label}")
~~brain_sub_task.jump(brain_label)~~
~~brain_sub_task.tick_in_context()~~

=== brain_next
await delay_sim(1)
jump brain_loop


=== brain_attack
atk_id = get_inventory_value(brain_id, "BRAIN_ATTACK_ID", None)
yield idle  if atk_id is None
yield idle  if atk_id ==0
atk = to_object(atk_id)
yield idle  if atk is None

# Set the target position, optionally shot at something
target_pos(brain_id, atk.pos.x, atk.pos.y, atk.pos.z, 1.0, atk_id, stop_dist=500)

yield idle
#
# Think nothing but happy thoughts
#
=== brain_nop
yield idle






/*

+ "Random inline":
    <<[$alert] Trouble
        % {COMMS_ORIGIN.name} we are desperate need of help
        " Are engines are offline 
        " we need your help fast
        % Engine trouble here
        " {COMMS_ORIGIN.name} Can you come and gives us a Jump
        " Jump drive that is eh he

# define a comms style


//comms if has_roles(COMMS_SELECTED_ID, "tsn, friendly")
+ "Give Orders":
    <<[$alert] Under attack
        % Option one 
        "  
        "
        % Second line
        "
        "
    <<[$alert]33% Under attack
        " Option 2
    <<[$alert]33% Under attack
        " Option 2

    >>[blue,white] Info
        "
        "
        "
*/

        




/*

# Transition labels?
#
=== //comms/give_orders/ //comms/
#
# Other routes
#

//spawn/
//spawn/grid
//focus/comms/
//focus/weapons/
//select/comms/
//select/weapons/

//signal/end_game/
//damage/object/

//listbox/name/item/

*/
