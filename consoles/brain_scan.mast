import brain_scan.py
brain_scan_tick = 0
brain_scan_task = None
brain_to_watch = None

//gui/tab/brain if is_dev_build()
    jump brain_screen

=== brain_scan_update
    await delay_sim(5)
    still_active = sbs.get_type_of_client(client_id)
    jump brain_scan_update if still_active != "brain_sci"

    await sub_task_schedule(brain_scan_update_text)
    jump brain_scan_update

=== brain_scan_update_text
    obj = to_object(brain_to_watch)
    ->END if obj is None
    
    _text = brain_scan_get_text(obj)
    brain_text.value = _text
    gui_represent(brain_text)
    ->END


=== brain_screen
    if brain_scan_task is None:
        sub_task_schedule(brain_scan_update)
    

    gui_activate_console("brain_sci")

    _ship_id = sbs.get_ship_of_client(client_id) 
    faction_ship = to_object(_ship_id)
    cambot_id = get_inventory_value(client_id, "BRAIN_COMBOT", None)
    cambot = to_object(cambot_id)
    if cambot_id is None or cambot is None:
        #
        # has_science_scan enables friendly eyes processing
        # while not being a player
        #
        cambot = to_object(npc_spawn(0,0,-10000, "", "", "invisible", "behav_nebula")) 
        cambot_id = to_id(cambot)
        set_inventory_value(client_id, "ADMIRAL_COMBOT", cambot_id)
        # Set up scan sources
        stations_friendly = any_role("__npc__,__player__")
        link(cambot_id,"extra_scan_source" ,stations_friendly)

    last_sci = cambot_id
    #
    # Should have a way to get all factions/side
    #
    #cambot.data_set.set("ally_list","tsn,civ,raider",0)
    cambot.data_set.set("ship_base_scan_range", 15000,0)
    
    await delay_sim(1)
    #
    # Assign before setting comms up
    #
    
    sbs.assign_client_to_ship(client_id, cambot_id)
    science_set_scan_data(cambot_id, cambot_id, {"scan": "Brain Scan"})
    # Whole screen
    gui_section(style="area:0,45px,100,100;")

    with gui_sub_section("col-width:75;"):
        #   with t:
        gui_row("row-height:35;margin:0,0,0,10px;")
        brain_text = gui_text("Under construction")

    has_brain = to_object_list(has_inventory("__BRAIN__"))

    # Left
    with gui_sub_section("col-width:25;"):
        gui_row()
        obj_list = gui_list_box(has_brain,"row-height: 0.1em; background:#1572;", item_template=brain_scan_selection_item, title_template=brain_scan_selection_title, select=True)
    
    obj_list.title_section_style += "background:#1578;"
    on change obj_list.get_value():
        brain_to_watch = to_id(obj_list.get_value())
        await sub_task_schedule(brain_scan_update_text)

    on change len(has_inventory("__BRAIN__")):
        jump brain_screen


    await gui()
