import common_console_selection.py

route_change_console(on_change_console)

==== on_change_console

jump select_console if not game_ended
->END

#
# Expects shared data 
#    player_list that has the list of player ships
#    player_count the number of expected player ships
#    game_started game state
#

========= client_main ==========
consoles = gui_get_console_type_list()
console_select_item = consoles[0]
console_select = consoles[0].path


# Assuming Id is in creation order
player_list = sorted(to_object_list(role("__player__")), key=lambda p: p.id)
player_list_all = player_list.copy()


console_ready = False
console_read_only = False
ship_name = player_list[0].name
client_select_ship = ship_name.lower()
ship_type = player_list[0].art_id
ship_type_def = ship_type

shared ship_list = ""
client_selected_index = 0
shared valid_interiors = set()

for key in grid_data:
    if len(grid_data[key]["grid_objects"])>0:
        sd = ship_data_get_ship_data_for(key)
        continue if sd is  None
        roles = sd.get("roles")
        continue if roles is None
        continue if "ship" not in roles
        valid_interiors.add(key)


mode = await gui_request_client_string(client_id, "console_mode")
previous_console = await gui_request_client_string(client_id, "console_previous")
crew_name = await gui_request_client_string(client_id, "crew_name")

if mode is not None and len(mode) > 0:
    jump operator_admin_console if mode=='admin'
    mode=mode.strip().lower()
    sp = mode.split(";")
    _ship = client_select_ship
    #
    # 
    #
    if len(sp) >1:
        mode = sp[0].strip()
        _ship = sp[1].strip()

    for i in range(len(consoles)):
        continue if mode != consoles[i].path
        console_select = consoles[i].path
        console_select_item = consoles[i]
        console_ready = True
        console_read_only = True
        client_select_ship = _ship
        jump console_force_mode
        break
            
    #modes = mode.split(';')
    #mode = None
    #if len(modes)>=3:
    #    mode = modes[2]
    #    # console_select = mode
    #    jump operator_admin_console if mode=='admin'
elif previous_console is not None and len(previous_console) > 0:
    for i in range(len(consoles)):
        continue if previous_console != consoles[i].path
        console_select = consoles[i].path
        console_select_item = consoles[i]

if auto_start and console_select_item:
    jump(console_selected)
    





========== select_console ==========
#print("CHNAGE CONSOLE EVENT?")
# default console_select = "helm"
# default client_select_ship = "artemis"
player_list = sorted(to_object_list(role("__player__")), key=lambda p: p.id)
player_list_all = player_list.copy()
#
if game_started:
    player_count = len(player_list)



# Clamp selected index
client_selected_index = min(int(player_count), client_selected_index )


ship_type_def = player_list[client_selected_index].art_id
ship_name = player_list[client_selected_index].name
client_select_ship = ship_name.lower()

#gui_activate_console("select_console")

ship_sec = gui_region(style="area: 10px,60px,400px,105px")
with ship_sec:
    gui_row(style="row-height: 45px;")

    _input = gui_input("desc:Ship Name", var="ship_name")
    on gui_message(_input):
        player_list[client_selected_index].name = ship_name
        #print(f"NAME CHANGE {_input.value} {ship_name}")
        client_select_ship = ship_name
        #gui_update_shared("sh_ship_list", None)

ship_sec_not = gui_region(style="area: 10px,60px,400px,105px")
with ship_sec_not:
    gui_row(style="row-height: 45px;")
    _display = gui_text(ship_name, style="tag:sh_ship_name")

ship_sec2 = gui_region(style="area: 10px,110px,500px,520px")
with ship_sec2:
    gui_row() #style="row-height: 300px;")

    #
    # Specify only ships with defined engineering grid
    #
    spick = ship_picker_control(f"Your Ship", ship_type_def, ship_keys=valid_interiors)
    gui_content(spick, style="tag:sh_ship_picker", var="ship_type")
    on change ship_type:
        player_list[client_selected_index].art_id = ship_type
        gui_update_shared("sh_ship_list", None)

if sbs.is_demo() or console_select_item.path != "helm" or game_started:
    gui_hide(ship_sec)
    gui_show(ship_sec_not)
    spick.read_only = True
elif console_select_item.path == "helm" and not game_started:
    gui_show(ship_sec_not)
    spick.read_only = False
    


#
# List of available ships
# ship_sec2 = gui_region(style="area: 1,110px,500px,520px")
gui_section( style="area: 10px,550px,500px,100-60px;")
ship_list = player_list_all[:player_count]
ship_select_lb = gui_list_box(ship_list,"row-height: 3em; background:#1572;tag:sh_ship_list;", item_template=console_ship_select_template, title_template=console_ship_select_title_template, select=True)
ship_select_lb.set_selected_index(client_selected_index)


#
# List of available consoles
#
gui_section( style="area: 510px, 2, 99,100-60px;")
gui_row(style="row-height: 45px;")

crew_input = gui_input("desc:Crew person Name", var="crew_name")
gui_row(style="row-height: 45px;")
gui_blank()
gui_row()

console_select_lb = gui_list_box(consoles,"row-height: 3em; background:#1572;", item_template=console_select_template, title_template=console_select_title_template, select=True, read_only=console_read_only)
console_select_lb.set_value(console_select_item)

#
# Ready state
#
gui_section( style="area: 80,100-60px, 99,100;row-height: 50px;")
if not game_started and not console_ready:
    gui_checkbox("ready", var="console_ready")
else:
    on gui_message(gui_button("ready")):
        console_ready = True
        jump console_selected

gui_section(style="area: 0,100-50px, 35,100;")
gui_layout_widget("text_waterfall")


on change player_count:
    client_selected_index = min(client_selected_index, int(player_count)-1)
    # Just refresh if reduce ship count for now
    # jump select_console if len(lb_ships.items)>player_count
    # Otherwise can refresh faster if adding ships
    ship_list = player_list_all[:player_count]
    ship_select_lb.items = ship_list
    ship_select_lb.set_selected_index(min(client_selected_index, len(ship_list)))
    gui_represent(ship_select_lb)
    

on change console_select_lb.get_value():
    #
    # Redo gui if change involves helm
    #
    console_select_item = console_select_lb.get_value()
    console_select = console_select_item.path
    if console_select_item.path == "helm" and not game_started:
        gui_show(ship_sec)
        gui_hide(ship_sec_not)
        spick.read_only = False
        gui_represent(ship_sec2)
    elif operator_mode_enabled and console_select_item.path == "admin":
        console_ready = True
        jump(console_select_item.label)
    else:
        #print("hiding 1")
        gui_hide(ship_sec)
        gui_show(ship_sec_not)
        spick.read_only = True
        gui_represent(ship_sec2)

  

on change ship_select_lb.get_value():
    client_select_ship_item = ship_select_lb.get_value()
    client_selected_index = ship_select_lb.get_selected_index()
    if client_select_ship_item is not None:
        #print("SHIP LIST {client_selected_index} {client_select_ship_item} ")
        client_select_ship = client_select_ship_item.name
        ship_name = client_select_ship
        ship_type = client_select_ship_item.art_id
        gui_update("sh_ship_picker", ship_type)
        gui_update("sh_ship_name", ship_name)
        
        
on change ship_select_lb.get_value().art_id:
    ship_type = ship_select_lb.get_value().art_id
    gui_update("sh_ship_picker", ship_type)
    gui_update("sh_ship_list", None)
        
on change ship_select_lb.get_value().name:
    ship_name = ship_select_lb.get_value().name
    _input.value = ship_name
    _display.value = ship_name
    gui_represent(ship_sec_not)
    gui_represent(ship_sec)
    gui_update("sh_ship_list", None)
    
    
        
await gui()


# Multiple labels to call to get here

====== game_started_console ====
if not console_ready:
    jump select_console
#
# This delay lets the server finish
# building the map, some times 
# a race condition occurs like the grid objects 
# or player ship aren't spawn first
#
await delay_sim(1)

====== console_selected ====
if console_select is None or client_select_ship is None:
    jump select_console

_ship_id= None
for player_ship in to_object_list(role("__PLAYER__")):
    if player_ship.name.lower() == client_select_ship:
        _ship_id = player_ship.id

        sbs.assign_client_to_ship(client_id, _ship_id)
        assign_client_to_alt_ship(client_id, 0)
        #set_inventory_value(client_id, "assigned_ship", _ship_id)
        #
        # Clear any alt ship e.g. comms give orders
        #
        set_inventory_value(client_id, "2dview_alt_ship", 0)
        link(_ship_id, "consoles", client_id)
        


jump select_console if _ship_id is None


#
# This should get a skybox with client overriding, shp, overriding shared
#
sky_box = get_shared_variable("skybox", "sky1")
# print(f"select console {sky_box.path}" )
sky_box = get_inventory_value(_ship_id, "skybox", sky_box)
sky_box = get_inventory_value(client_id, "skybox", sky_box)
skybox_schedule(sky_box, client_id)

====== show_console_selected ====
#
# Make it so the console can be found if needed
#
#------------------------------------------------------------------------------------------------------------
sbs.set_beam_damages(client_id, 7.0, difficulty)
#------------------------------------------------------------------------------------------------------------



set_inventory_value(client_id, "CONSOLE_TYPE", console_select)
# Remove any console roles
for k in consoles:
    remove_role(client_id, k.path)
add_role(client_id, "console, {console_select}")
# print("storing {console_select}")
sbs.set_client_string(client_id, "console_previous", console_select)
#print("storing {crew_name}")
sbs.set_client_string(client_id, "crew_name", crew_name)
set_inventory_value(client_id, "CREW_NAME", crew_name)

# Retrieve the item by string (because might have navigator here via tab)
console = gui_get_console_type(console_select)
if console is not None:
    jump(console.label)
else:
    """ Invalid Console defined and selected"""
    await gui()

=========== debug_mast =========

task_count = 0
for sch in mast.schedulers:
    for tsk in sch.tasks:
        task_count += 1

gui_section( style="area: 0,50px, 100,100;")
"""""
Task count {task_count}
""""""
await gui(timeout=timeout(4))

jump debug_mast



======= console_force_mode

jump game_started_console if game_started

# "media/helm/consoles0001"
_images = console_get_images(console_select)
_image = 0


--- loop
gui_section( style=f"area: 0, 76, 100, 100;")
"""
$t Console assigned to {console_select}

$t on ship {client_select_ship}
"""
jump no_images if len(_images)==0

gui_section( style=f"area: 0, 0, 100, 76;")
gui_image_keep_aspect_ratio_center(_images[_image])
_image += 1 
_image %= len(_images)

# Remember delay_app is needed her because the sim
# may not be running
await gui(timeout = delay_app(10)):
    on timeout:
        jump loop


jump loop

--- no_images

await gui()

