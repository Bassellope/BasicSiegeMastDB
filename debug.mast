
shared allow_debug = True

if allow_debug==is_dev_build():
    gui_add_console_tab(SHARED, "helm", "debug", "debug_screen")
    gui_add_console_tab(SHARED, "comms", "debug", "debug_screen")
    gui_add_console_tab(SHARED, "engineering", "debug", "debug_screen")
    gui_add_console_tab(SHARED, "science", "debug", "debug_screen")
    gui_add_console_tab(SHARED, "weapons", "debug", "debug_screen")
    gui_add_console_tab(SHARED, "debug", "mast", "mast_debug_screen")
    gui_add_console_tab(SHARED, "debug", "debug", None)
    gui_add_console_tab(SHARED, "debug", "__back_tab__", "console_selected")
    gui_add_console_tab(SHARED, "mast", "mast", None)    
    gui_add_console_tab(SHARED, "mast", "debug", "debug_screen")
    gui_add_console_tab(SHARED, "mast", "__back_tab__", "console_selected")


===== debug_screen ======

gui_section( style="area: 10,10,90,90;")

"""
Under construction
"""

gui_section(style="area:10,15,35,100;row-height:35px;")
gui_row()
on gui_message(gui_button("Test Upgrades")):
    jump spawn_test_upgrades

gui_row()
on gui_message(gui_button("Test Wreck")):
    jump spawn_test_wreck



gui_row()
on gui_message(gui_button("Test Shapes")):
    jump spawn_test_shapes

gui_row()
on gui_message(gui_button("Test list consoles")):
    jump debug_show_list_consoles

gui_row()
on gui_message(gui_button("Fake scan all")):
    jump debug_fake_scan_all


gui_section(style="area:50,15,80,100;row-height:35px;")
gui_row()
on gui_message(gui_button("Test Enemy")):
    await task_schedule(spawn_test_enemy,data={"abi": None})
gui_row()
on gui_message(gui_button("Test cloak")):
    await task_schedule(spawn_test_enemy, data={"abi": "elite, elite_cloak"})
gui_row()    
on gui_message(gui_button("Test Jump back")):
    await task_schedule(spawn_test_enemy, data={"abi": "elite, elite_jump_back"})
gui_row()    
on gui_message(gui_button("Test Jump Forward")):
    await task_schedule(spawn_test_enemy, data={"abi": "elite, elite_jump_forward"})
gui_row()    
on gui_message(gui_button("Test Elite Turn")):
    await task_schedule(spawn_test_enemy, data={"abi": "elite, elite_turn"})
gui_row()    
on gui_message(gui_button("Test Elite Warp")):
    await task_schedule(spawn_test_enemy, data={"abi": "elite, elite_warp"})
gui_row()    
on gui_message(gui_button("Test Elite Scramble")):
    await task_schedule(spawn_test_enemy, data={"abi": "elite, elite_shield_scramble"})
gui_row()
on gui_message(gui_button("Test Elite shield drain")):
    await task_schedule(spawn_test_enemy, data={"abi": "elite, elite_shield_drain"})
gui_row()
on gui_message(gui_button("Test Elite shield vamp")):
    await task_schedule(spawn_test_enemy, data={"abi": "elite, elite_shield_vamp"})
gui_row()        
on gui_message(gui_button("Test all abilities")):
    await task_schedule(spawn_test_enemy, data={"abi": "elite, elite_cloak, elite_jump_forward, elite_jump_back, elite_warp, elite_turn"})    



gui_activate_console("debug")

await gui()


===== spawn_test_upgrades === 
# For testing upgrades, load some candy up front
_ship_id = get_inventory_value(client_id, "assigned_ship")
jump debug_screen if _ship_id is None

eo = to_engine_object(_ship_id)
_pos_eo = eo.pos
_forward = eo.forward_vector()
#_vpos = Vec3(_pos_eo.x, _pos_eo.y, _pos_eo.z)
#_vforward = Vec3(_forward.x, _forward.y, _forward.z)
_pos = _pos_eo + (_forward * 300)


pickup_spawn(_pos.x, _pos.y, _pos.z, "carapaction_coil")
pickup_spawn(200+_pos.x, _pos.y, _pos.z+250, "infusion_pcoils")
pickup_spawn(275+_pos.x, _pos.y, _pos.z+250, "tauron_focuser")
pickup_spawn(125+_pos.x, _pos.y, _pos.z+325, "secret_codecase")
pickup_spawn(200+_pos.x, _pos.y, _pos.z+325, "hidens_powercell")
pickup_spawn(275+_pos.x, _pos.y, _pos.z+325, "vigoranium_nodule")
pickup_spawn(125+_pos.x, _pos.y, _pos.z+400, "cetrocite_crystal")
pickup_spawn(200+_pos.x, _pos.y, _pos.z+400, "lateral_array")
pickup_spawn(275+_pos.x, _pos.y, _pos.z+400, "haplix_overcharger")

jump debug_screen

===== spawn_test_wreck ===== 
# For testing wrecks, load one up front
_ship_id = get_inventory_value(client_id, "assigned_ship")
jump debug_screen if _ship_id is None

eo = to_engine_object(_ship_id)
_pos_eo = eo.pos
_forward = eo.forward_vector()
_pos = _pos_eo + (_forward * 300)

wr = terrain_spawn(_pos.x, _pos.y, _pos.z+300, "Wreck", "wreck", "wreck", "behav_asteroid")
temp_yaw = random.uniform(0.001, 0.003)
temp_pitch = random.uniform(0.002, 0.004)
wr.engine_object.steer_yaw = temp_yaw
wr.engine_object.steer_pitch = temp_pitch
wr.blob.set("radar_color_override", "#f0c")
set_inventory_value(wr.id, "hp", 150)
set_inventory_value(wr.id, "hull_side", "skaraan")
set_inventory_value(wr.id, "hull_type", "cruiser")

jump debug_screen


===== spawn_test_enemy ===== 
# For testing wrecks, load one up front
_ship_id = get_inventory_value(client_id, "assigned_ship")
jump debug_screen if _ship_id is None

eo = to_engine_object(_ship_id)
_pos_eo = eo.pos
_forward = eo.forward_vector()
_pos = _pos_eo + (_forward * 300)

# spawn_data = npc_spawn(_pos.x, _pos.y, _pos.z+400, "Clay Pigeon", "ximni, raider", "xim_light_cruiser", "behav_npcship")

fleet_obj = create_npc_fleet_and_ships("ximni", 1,0, _pos.x, _pos.y, _pos.z+400, ship_roles=abi)

for e in linked_to(fleet_obj.id,"ship_list"):
    r_blob = to_blob(e)
    continue if r_blob is None
    r_blob.set("shield_val", 0, 0)
    r_blob.set("shield_val", 0, 1)

->END




===== spawn_test_shapes === 
# For testing generic shapes
_ship_id = get_inventory_value(client_id, "assigned_ship")
jump debug_screen if _ship_id is None

eo = to_engine_object(_ship_id)
_pos_eo = eo.pos
_forward = eo.forward_vector()
_pos = _pos_eo + (_forward * 300)

shape1 = terrain_spawn(_pos.x-600, _pos.y, _pos.z+300, "Shape 1", "shape", "generic-cube", "behav_asteroid")
shape2 = terrain_spawn(_pos.x-200, _pos.y, _pos.z+300, "Shape 2", "shape", "generic-cylinder", "behav_asteroid")
shape3 = terrain_spawn(_pos.x+200, _pos.y, _pos.z+300, "Shape 3", "shape", "generic-dodecahedron", "behav_asteroid")
shape4 = terrain_spawn(_pos.x+600, _pos.y, _pos.z+300, "Shape 4", "shape", "generic-disk", "behav_asteroid")
shape5 = terrain_spawn(_pos.x-600, _pos.y, _pos.z+700, "Shape 5", "shape", "generic-hexagon", "behav_asteroid")
shape6 = terrain_spawn(_pos.x-200, _pos.y, _pos.z+700, "Shape 6", "shape", "generic-icosahedron", "behav_asteroid")
shape7 = terrain_spawn(_pos.x+200, _pos.y, _pos.z+700, "Shape 7", "shape", "generic-cone", "behav_asteroid")
shape8 = terrain_spawn(_pos.x+600, _pos.y, _pos.z+700, "Shape 8", "shape", "generic-octohedron", "behav_asteroid")
shape9 = terrain_spawn(_pos.x-600, _pos.y, _pos.z+1100, "Shape 9", "shape", "generic-rectangle", "behav_asteroid")
shape10 = terrain_spawn(_pos.x-200, _pos.y, _pos.z+1100, "Shape 10", "shape", "generic-sphere", "behav_asteroid")
shape11 = terrain_spawn(_pos.x+200, _pos.y, _pos.z+1100, "Shape 11", "shape", "generic-tetrahedron", "behav_asteroid")
shape12 = terrain_spawn(_pos.x+600, _pos.y, _pos.z+1100, "Shape 12", "shape", "generic-torus", "behav_asteroid")

jump debug_screen

===== mast_debug_screen ======

gui_section(style="area: 10,10,90,90;")

"""
Under construction
"""

gui_activate_console("mast")

await gui()


==== debug_show_list_consoles ====

gui_section(style="area: 10,10,90,90;")

## To get the ships this client is on
####    get_inventory_value(client_id,"assigned_ship")
#
## To get the things link to the player ship as a console
####    linked_to( ....as set of things ...., "consoles")
#
## Everything that has a inventory_value CONSOLE_TYPE 
## That has the value "helm"
####         has_inventory_value("CONSOLE_TYPE", "helm")
#
#
consoles =  linked_to(get_inventory_value(client_id,"assigned_ship"), "consoles") & has_inventory_value("CONSOLE_TYPE", "helm")

#
# 
#
all_helm_consoles =  role("__gui__") & has_inventory_value("CONSOLE_TYPE", "helm")

"""
My ships's Helm count {len(consoles)}
All Helm count {len(all_helm_consoles)}
"""

for c in consoles:
    comms_broadcast(c, f"my ship's Helm console", "green")


for c in all_helm_consoles:
    p = to_object(get_inventory_value(c,"assigned_ship"))
    comms_broadcast(c, f"{p.name}'s Helm console", "blue")


await gui():
    + "refresh":
        jump debug_show_list_consoles
    + "back":
        jump debug_screen
    


==== debug_fake_scan_all =====

for p in role("__player__"):
    for r in role("raider"):
        science_set_scan_data(p, r, "Debug Default scan")

jump debug_screen
