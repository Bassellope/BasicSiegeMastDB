==== comms_damaged ====== 

all_dcs = to_object_list(grid_objects(COMMS_ORIGIN_ID) & role("damcons"))
dcs = []
workers = []
for dc in all_dcs:
    if has_link_to(dc.id, "work-order", COMMS_SELECTED_ID):
        workers.append(dc)
    else:
        dcs.append(dc)

#color: get_inventory_value(d.id, 'color');
await comms():
    + "assign {d.name}" color "{get_inventory_value(d.id, 'color')}" for d in dcs:
        # Add this to the 
        link(d.id, "work-order", COMMS_SELECTED_ID)
    + "cancel {d.name}"  color "{get_inventory_value(d.id, 'color')}" for d in workers:
        unlink(d.id, "work-order", COMMS_SELECTED_ID)
    + "set rally point":
        jump room_set_idle_loc

    #
    # This watches for state changes tht should change
    # the comms e.g. this grid object gets fixed
    #
    =change has_role(COMMS_SELECTED_ID, "__damaged__") == True:
        jump comms_undamaged
    #=focus:
    #    print("focus D")

jump comms_damaged


==== comms_undamaged ====== 

await comms():
    + "set rally point":
        jump room_set_idle_loc
    #
    # This watches for state changes tht should change
    # the comms e.g. this grid object gets damaged
    #
    =change has_role(COMMS_SELECTED_ID, "__damaged__") == False:
        jump comms_damaged
    #=focus:
    #    print("focus UD")

print("rerunning UD")
jump comms_undamaged


==== room_set_idle_loc ====== 

dcs = to_object_list(grid_objects(COMMS_ORIGIN_ID) & role("damcons"))
await comms():
    + "back":
        jump grid_comms
    + "set {d.name} rally point" color "{get_inventory_value(d.id, 'color')}" for d in dcs:
        # Add this to the 
        _blob = to_blob(COMMS_SELECTED_ID)
        _loc_x = _blob.get("curx", 0)
        _loc_y = _blob.get("cury", 0)
        set_inventory_value(d.id, "idle_pos", (_loc_x, _loc_y) )
        idle_marker = get_inventory_value(d.id, "idle_marker", None)
        #
        #
        clear_timer(d.id, "boost_timer")

        if idle_marker is not None:
            _blob = to_blob(idle_marker)
            _blob.set("curx",_loc_x, 0)
            _blob.set("cury",_loc_y, 0)

        is_idle = get_inventory_value(d.id, "idle")
        if is_idle:
            set_inventory_value(d.id, "idle_state", "start" )

jump grid_comms
