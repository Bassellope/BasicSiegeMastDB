route_weapons_select("weapons_select_route")

==== friendly_give_orders ======
#
# Get the comms selected, the NPC ship 
# dispaly the weapons screen of that ship to aid in 
# select the orders
#
comms_selected = get_inventory_value(client_id, "COMMS_TARGET_UID", 0)
# Get the comms selected face
station_face = get_face(comms_selected)
#
# We get and remember the player ship we are on
# and its name
#

ship = get_inventory_value(client_id, "assigned_ship")
player = to_object(ship)

if player:
    player_name = player.name
else:
    player_name = "Terran"
#
# Switch to the friendly ship
#
assign_client_to_ship(client_id,comms_selected)
#
# Make a limit weapons console
#
gui_section(style="area: 25, 4, 100, 80;")
gui_activate_console("weapons")
gui_layout_widget("2dview")
#
# Draw a face and interaction text
#
gui_section(style="area:0,4,25,80;")

gui_face(station_face)
gui_row()
"""
text: Hello {player_name} tell us what to do
"""

#
# The selection will be made in parallel
# and set in inventory
#
message = None
await gui():
   + "APPLY":
        target_id = get_weapons_selection(comms_selected)
        target_point = get_inventory_value(comms_selected, "WEAPONS_SELECTED_POINT", None)
        print("GIVE ORDERS {target_id} {target_point}")
        if target_id is not None and target_id != 0:
            print("GIVE ORDERS inner {target_id}")
            target_obj = to_object(target_id)
            if target_obj is not None:
                shoot = has_role(target_id, "raider")

                set_inventory_value(comms_selected, "TARGET_ID", target_id)
                if shoot:
                    message = "OK {player_name} - going to attack {target_obj.name}"
                else:
                    message = "OK {player_name} - going to rendezvous with {target_obj.name}"
                    
                target(comms_selected, target_id, shoot)
                
        if target_point is not None:
            print("GIVE ORDERS")
            message = "Heading to designated waypoint"
            target_pos(comms_selected, target_point.x, target_point.y, target_point.z )
        
   + "CANCEL":
        # pass
#
# Get back on the right ship
#

assign_client_to_ship(client_id,ship)
if message is not None:
    comms_message(message, comms_selected, ship, title_color="cyan")
    #receive ship comms_selected "{message}"

jump show_console_selected

========== weapons_select_route ========
#
# Handles the 2dView selection for friendlies
#
->END if not has_role(WEAPONS_ORIGIN_ID, "friendly")

nav = get_inventory_value(WEAPONS_ORIGIN_ID, "WEAPONS_SELECTED_NAV", None)
if nav:
    sim.delete_navpoint_by_reference(nav)
    set_inventory_value(WEAPONS_ORIGIN_ID, "WEAPONS_SELECTED_NAV", None)

# Handle initial clicks
if EVENT.selected_id != 0:
    set_inventory_value(WEAPONS_ORIGIN_ID, "WEAPONS_SELECTED_POINT", None)
    set_inventory_value(WEAPONS_ORIGIN_ID, "WEAPONS_SELECTED_ID", EVENT.selected_id)
else:
    set_inventory_value(WEAPONS_ORIGIN_ID, "WEAPONS_SELECTED_POINT", Vec3(EVENT.source_point))
    set_inventory_value(WEAPONS_ORIGIN_ID, "WEAPONS_SELECTED_ID", None)
    
    nav = sim.add_navpoint(EVENT.source_point.x,EVENT.source_point.y, EVENT.source_point.z, "goto", "white")
    ~~ nav.visibleToShip =WEAPONS_ORIGIN_ID~~
    set_inventory_value(WEAPONS_ORIGIN_ID, "WEAPONS_SELECTED_NAV", nav)

#Done no point running more
->END

