################
## common code for different map type

=========== spawn_friendly_npc ===========

print(f"World Select: {world_select.path}")
if world_select.path == "deep_strike":
    friendly_select = "none"

match friendly_select:
    case "many":
        max_hull_points=10
    case "lots":
        max_hull_points=8
    case "some":
        max_hull_points=5
    case "few":
        max_hull_points=3
    case "none":
        # no civilian or friendly npcs
        # But added eyes
        jump spawn_players


total_hull_points = 0

attempts = 0

# grab the ship data for all ships on TSN side
tsn_ship_data = ship_data_filter_ship_data_by_side(None, "TSN", "defender", ret_key_only=False)
# pick a random tsn ship
count = 1


jump civilians if tsn_ship_data is None

spawn_pos = Vec3(0,0,0)
stations_friendly = to_object_list(role("tsn")  & role("station"))
for x while total_hull_points<max_hull_points:
    #
    ship = random.choice(tsn_ship_data)

    hull_points = ship["hullpoints"]

    if hull_points+total_hull_points > max_hull_points:
        attempts += 1
        # failed to find a small enough ship
        if attempts > 20:
            break
        #
        # try again
        continue

    # reset attempts
    attempts = 0
    # OK add this ship
    if len(stations_friendly) > 0:
        so = random.choice(stations_friendly)
        spawn_pos = so.pos
        spawn_pos = spawn_pos.rand_offset(3500, 5300, ring=True)

    friend = to_id(npc_spawn(*spawn_pos, f"tsn {str(count).zfill(2)}", "tsn, friendly", ship["key"], "behav_npcship"))
    count += 1
    total_hull_points += hull_points
    set_face(friend, random_terran())

---- civilians

civilian_count = 0
match friendly_select:
    case "many":
        civilian_count = 4
    case "lots":
        civilian_count = 3
    case "some":
        civilian_count = 2
    case "few":
        civilian_count = 1
    case "none":
        jump spawn_players

# grab the ship data for all ships on TSN side
civilian_data = ship_data_filter_ship_data_by_side(None, None, "civilian", ret_key_only=False)
->END if len(civilian_data)==0
count = 1

for count in range(civilian_count):
    #
    ship = random.choice(civilian_data)
    #
    if len(stations_friendly) > 0:
        so = random.choice(stations_friendly)
        spawn_pos = so.pos
        spawn_pos = spawn_pos.rand_offset(3500, 5300, ring=True)

    friend = to_id(npc_spawn(*spawn_pos, f"civ {str(count).zfill(2)}", "tsn, friendly, civilian", ship["key"], "behav_npcship"))
    set_face(friend, random_terran(civilian=True))
    count += 1


====== spawn_players =======
#
# No longer "Spawn" but move an remove
#
c=0
first = True

#test_func(3)



spawn_pos = Vec3(0,0,0)
player_ships = to_object_list(role("default_player_ship"))
#------------------------------------------------------------------------------------------------------------
for player_ship in player_ships:
    side = player_ship.side
    stations_friendly = to_object_list(role(side)  & role("station"))

    if c>= player_count:
        # make sure the id is cleared dry docked ships
        player_ship.art_id = "invisible"
        player_ship.remove_role("__player__")
        task_schedule(player_ships_remove_unused, {"_ship_id": player_ship.id})
        continue

    if len(stations_friendly) > 0:
        so = random.choice(stations_friendly)
        spawn_pos = so.pos
        spawn_pos = spawn_pos.rand_offset(3500, 5300, ring=True)
        player_ship.pos = spawn_pos
    c+=1
    if first:
        assign_client_to_ship(0,to_id(player_ship))
        first = False

    player_ship_update_friendly(player_ship, stations_friendly, True)
    

->END
    
    
==== player_ships_remove_unused
sbs.delete_object(_ship_id)
->END

        
