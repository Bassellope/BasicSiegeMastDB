################
## common code for different map type

=========== spawn_friendly_npc ===========

print(f"World Select: {world_select.path}")
if world_select.path == "deep_strike":
    friendly_select = "none"

match friendly_select:
    case "many":
        max_hull_points=10
    case "lots":
        max_hull_points=8
    case "some":
        max_hull_points=5
    case "few":
        max_hull_points=3
    case "none":
        # no civilian or friendly npcs
        # But added eyes
        jump spawn_players


total_hull_points = 0

attempts = 0

# grab the ship data for all ships on TSN side
tsn_ship_data = ship_data_filter_ship_data_by_side(None, "TSN", "defender", ret_key_only=False)
# pick a random tsn ship
count = 1

shared shipname_data = load_json_data(get_mission_dir_filename("shipnames.json"))
tsnname_list = shipname_data.get("tsn")
canuck_list = shipname_data.get("canadian")

jump civilians if tsn_ship_data is None

spawn_pos = Vec3(0,0,0)
stations_friendly = to_object_list(role("tsn")  & role("station"))
for x while total_hull_points<max_hull_points:
    #
    ship = random.choice(tsn_ship_data)

    hull_points = ship["hullpoints"]

    if hull_points+total_hull_points > max_hull_points:
        attempts += 1
        # failed to find a small enough ship
        if attempts > 20:
            break
        #
        # try again
        continue

    # reset attempts
    attempts = 0
    # OK add this ship
    if len(stations_friendly) > 0:
        so = random.choice(stations_friendly)
        spawn_pos = so.pos
        spawn_pos = spawn_pos.rand_offset(3500, 5300, ring=True)
    if random.randint(1,1867) == 1867: ### This is an inside joke for our Canadian players. 
        friend = to_id(npc_spawn(*spawn_pos, f"TSN {canuck_list.pop(random.randrange(len(canuck_list)))}", "tsn, friendly", ship["key"], "behav_npcship"))
    else:
        friend = to_id(npc_spawn(*spawn_pos, f"TSN {tsnname_list.pop(random.randrange(len(tsnname_list)))}", "tsn, friendly", ship["key"], "behav_npcship"))
    count += 1
    total_hull_points += hull_points
    set_face(friend, random_terran())

---- civilians

civilian_count = 0
match friendly_select:
    case "many":
        civilian_count = 4
    case "lots":
        civilian_count = 3
    case "some":
        civilian_count = 2
    case "few":
        civilian_count = 1
    case "none":
        jump spawn_players

# grab the ship data for all ships on TSN side
civilian_data = ship_data_filter_ship_data_by_side(None, None, "civilian", ret_key_only=False)
->END if len(civilian_data)==0
count = 1

alpha = [ "B", "C", "F", "G", "H", "J", "R", "S", "U", "V", "Y", "Z" ]
civname_list = shipname_data.get("civilian")

for count in range(civilian_count):
    #
    ship = random.choice(civilian_data)
    #
    if len(stations_friendly) > 0:
        so = random.choice(stations_friendly)
        spawn_pos = so.pos
        spawn_pos = spawn_pos.rand_offset(3500, 5300, ring=True)
    
    civ_name = random.choice(alpha) + str(random.randint(1,99)).zfill(2) + " " + civname_list.pop(random.randrange(len(civname_list)))

    friend = to_id(npc_spawn(*spawn_pos, civ_name, "tsn, friendly, civilian", ship["key"], "behav_npcship"))
    set_face(friend, random_terran(civilian=True))
    count += 1


====== spawn_players =======
c=0
first = True

#test_func(3)

stations_friendly = to_object_list(role("tsn")  & role("station"))

spawn_pos = Vec3(0,0,0)

#------------------------------------------------------------------------------------------------------------
for player_ship_data in player_list:

    if player_ship_data["id"] is not None:
        print("WARNING: player ship {player_ship_data['name]} may have been spawned twice" )

    if c>= player_count:
        # make sure the id is cleared dry docked ships
        player_ship_data["id"] = None
        continue
    
    if len(stations_friendly) > 0:
        so = random.choice(stations_friendly)
        spawn_pos = so.pos
        spawn_pos = spawn_pos.rand_offset(3500, 5300, ring=True)

    player_ship = to_id(player_spawn(*spawn_pos, player_ship_data["name"], player_ship_data["side"], player_ship_data["ship"]))
    
    c+=1
    player_ship_data["id"] = player_ship

    set_face(player_ship, get_face_from_data(player_ship_data["face"]))
    set_inventory_value(player_ship, "respawn_time", 5)
    if first:
        assign_client_to_ship(0,player_ship)
        first = False

my_players = role("__player__") & role("tsn")
for player in my_players:
    ship_id = player
    blob = to_blob(player)
    num_ids = blob.get("num_extra_scan_sources",0)

    for friend in any_role("friendly, station"):
        blob.set("extra_scan_source", friend, num_ids)
        num_ids += 1
        follow_route_select_science(player, friend)

    blob.set("num_extra_scan_sources",num_ids,0)

->END
    
    
        
