route grid spawn route_grid_spawn

# Not using this route, changing target ia AI loop
#route grid object route_grid_arrive


shared grid_data = load_json_data(get_mission_dir_filename("grid_data.json"))


MAX_HP = 6
HEAL_TIME = 30*120


======== spawn_grid_objects ========
#
# Called by basic_ai, so we know this is a player ship already
#
jump rebuild_grid_items 
->END

====== rebuild_grid_items =====
->END if grid_data is None
so = to_object(SPAWNED_ID)
->END if so is None
ship_grid  = grid_data.get(so.art_id)
->END if ship_grid is None
internal_items = ship_grid.get("grid_objects")
->END if internal_items is None




# Delete all grid objects
items =grid_objects(SPAWNED_ID)
for k in items:
    # delete by id
    do sbs.delete_grid_object(SPAWNED_ID, k)
next k


#
# Got data build grid objects
#
i=0 # used to create unique tag
sensors = 0 # used to calculate max damage
engines = 0
weapons = 0
shields = 0
for g in internal_items:
    loc_x = int(g["x"])
    loc_y = int(g["y"])
    coords = f"{loc_x},{loc_y}"
    name_tag = f"{g['name']}:{coords}"

    go =  grid_spawn(SPAWNED_ID,  name_tag, name_tag, loc_x, loc_y, g["icon"], g["color"], g["roles"])
    do go.blob.set("icon_scale", g["scale"], 0)
    # save color so it cn be restored
    do set_inventory_value(go.id, "color", g["color"])
    #
    # Add link so query can find this relationship
    #       e.g. query to find engine grid objects on a ship
    #       linked_to(player_id, "grid_objects") & role("engine")
    #
    do link(so, "grid_objects",go)
    do add_role(go, "__undamaged__")
    i+=1

    #
    # Update max damage counts
    #
    roles = g["roles"].lower()
    if "sensors" in roles:
        sensors += 1
    end_if
    if "engine" in roles:
        engines += 1
    end_if
    if "shield" in roles:
        shields += 1
    end_if
    if "weapon" in roles:
        weapons += 1
    end_if
next g
blob = to_blob(so)
#do print(f"E:{engines} W:{weapons} SN:{sensors}, SH: {shields}")

do  blob.set('system_max_damage', weapons, sbs.SHPSYS.WEAPONS)
do  blob.set('system_max_damage', engines, sbs.SHPSYS.ENGINES)
do  blob.set('system_max_damage', sensors, sbs.SHPSYS.SENSORS)
do  blob.set('system_max_damage', shields, sbs.SHPSYS.SHIELDS)
do  blob.set('system_damage', 0, sbs.SHPSYS.WEAPONS)
do  blob.set('system_damage', 0, sbs.SHPSYS.ENGINES)
do  blob.set('system_damage', 0, sbs.SHPSYS.SENSORS)
do  blob.set('system_damage', 0, sbs.SHPSYS.SHIELDS)


#
# Create damcons/lifeforms
#
colors  = ["yellow", "green", "blue"]
for i in range(3):
    v = sbs.vec3(0.5,0,0.5)
    point = sbs.find_valid_unoccupied_grid_point_for_vector3(SPAWNED_ID, v, 5)
    dc = grid_spawn(SPAWNED_ID, f"DC{i+1}", f"DC{i+1}", point[0],point[1], 80, colors[i], "damcons, lifeform")
    do set_inventory_value(dc.id, "color", colors[i])
next i

#
# Create marker
#
v = sbs.vec3(0.5,0,0.5)
loc = sbs.find_valid_grid_point_for_vector3(SPAWNED_ID, v, 5)
loc_x = loc[0]
loc_y = loc[1]
ship = SPAWNED_ID & 0xFFFFFFFF
marker_tag = "marker:{ship}"
marker_go = grid_spawn(SPAWNED_ID , "marker", marker_tag, int(loc_x),int(loc_y), 121, "black", "#,marker") 
marker_go_id =  to_id(marker_go)
marker_gos[SPAWNED_ID] = marker_go_id





->END



========== route_grid_spawn =========
# AI for the player is the docking logic
jump damcon_ai_start if has_role(SPAWNED_ID, "damcons")

#### ELSE don't run a task
->END


========== damcon_ai_start  ================= 
#
# Run once code
#
# Hit points == MAX_HP 
do set_inventory_value(SPAWNED_ID, "HP", MAX_HP )


========== damcon_ai  ================= 

this_blob = to_blob(SPAWNED_ID)

# The damcons is no longer
->END if this_blob is None

pos_to_target = get_inventory_value(SPAWNED_ID, "target_pos")
speed = get_inventory_value(SPAWNED_ID, "speed", 0.01)
#
# If we are assigned a target pos, convert that to an idle pos
#
if pos_to_target is not None:
    loc_x = pos_to_target[0]
    loc_y = pos_to_target[1]
    do grid_target_pos(SPAWNED_ID, loc_x, loc_y, speed)
    do set_inventory_value(SPAWNED_ID, "target_pos", None )
    do set_inventory_value(SPAWNED_ID, "idle_pos", pos_to_target )
end_if

#
# This is teting to see if we've arrived
# Rather than using the grid object event
#
length = this_blob.get("path_length", 0)
jump loop_damcons_ai if length is not None and length > 0.1

this_blob = to_blob(SPAWNED_ID)

# The damcons is no longer
->END if this_blob is None
# check for garbage and mop up
obj = to_object(SPAWNED_ID)
# Damcon is no more
->END if obj is None

x = this_blob.get("curx", 0)
y = this_blob.get("cury", 0)


# if we are at the assigned idle pos exit
idle_pos =  get_inventory_value(SPAWNED_ID, "idle_pos")
jump handle_damcons_idle if idle_pos is not None and loc_x == idle_pos[0] and loc_y == idle_pos[1]


# Host is no more 
hm = sbs.get_hull_map(obj.host_id)
->END if hm is None

#
# Get the points at this location
#
at_point = hm.get_objects_at_point(x,y)

for id in at_point:
    # Only deal with Damage
    continue if not has_role(id, "__damaged__")
    continue if has_role(id, "damcons")
        
    go = to_object(id)
    continue if go is None


    # Have to unlink this so it is no longer seen
    do unlink(obj.host_id, "damage", id)
    do unlink(SPAWNED_ID, "assigned", id )
    # Remove work order
    do unlink(SPAWNED_ID, "work-order", id)
    do remove_role(id, "__damaged__")
    do add_role(id, "__undamaged__")


    # If hallway damage delete
    # else restore color and repair system
    system_heal = None
    if has_role(id, "hallway"):
        do sbs.delete_grid_object(go.host_id, id)
        do go.destroyed()
    #
    # This is a room, fix
    #
    else:
        blob = to_blob(id)
        color = get_inventory_value(id, "color")

        if color is None:
            color = "purple"
        end_if
        do blob.set("icon_color", color, 0)
        if has_role(id, "sensors"):
            system_heal = sbs.SHPSYS.SENSORS
        elif has_role(id, "weapon"):
            system_heal = sbs.SHPSYS.WEAPONS
        elif has_role(id, "engine"):
            system_heal = sbs.SHPSYS.ENGINES
        elif has_role(id, "shield"):
            system_heal = sbs.SHPSYS.SHIELDS
        end_if
    end_if
    #
    # 
    #
    if system_heal is not None:
        ship_blob = to_blob(go.host_id)
    
        current = ship_blob.get('system_damage', system_heal)
        if current >0:
            do ship_blob.set('system_damage', current-1 , system_heal)
        else:
            do ship_blob.set('system_damage', 0 ,  system_heal)
        end_if
    end_if
next id
    
# Then look for more work
# Find damage that is not assigned to someone else

# the_target = grid_closest(SPAWNED_ID, linked_to(obj.host_id, "damage")-has_link("assigned_to"))
#
# The damage needs to be a work order for a damcon
#
the_target =  grid_closest(SPAWNED_ID, linked_to(SPAWNED_ID, "work-order"))
if the_target is not None:
    do grid_target(SPAWNED_ID, the_target, speed)
    # Remove from available assignments
    do unlink(the_target, "assigned_to", SPAWNED_ID)
    do unlink(SPAWNED_ID, "assigned", the_target )
else:
    do grid_target_pos(SPAWNED_ID, obj.spawn_pos.x, obj.spawn_pos.y, speed)
end_if

===== loop_damcons_ai ====
#
# Loop while this damcon lives
#
delay sim 3s
-> damcon_ai


===== handle_damcons_idle =======
#
# When a damcon is camped on a spot 
# it may add benefits
#

obj = to_object(SPAWNED_ID)
->END if obj is None

# Host is no more 
hm = sbs.get_hull_map(obj.host_id)
->END if hm is None

#
# Get the points at this location
#
at_point = hm.get_objects_at_point(x,y)

for id in at_point:
    push handle_damcon_heal if has_role(id, "medical")
next id

jump loop_damcons_ai


===== handle_damcon_heal ======
#
# Need to camp for 2 minutes to add health
#
heal_delay = get_inventory_value(SPAWNED_ID, "next_hp_time", None)
hp = get_inventory_value(SPAWNED_ID, "HP", 0)

pop if hp >= MAX_HP
pop if heal_delay == 0 # fully healed

if heal_delay is None:
    do set_inventory_value(SPAWNED_ID, "next_hp_time", sim.time_tick_counter+ HEAL_TIME)
    <<-
end_if

pop if sim.time_tick_counter < heal_delay

hp += 1
ship = obj.host_id # obj defined in previous labels
hp %= (MAX_HP+1)
do set_inventory_value(SPAWNED_ID, "HP", hp)
if hp < MAX_HP:
    have ship broadcast "{obj.name} recovering {hp}" color "blue"
    do set_inventory_value(SPAWNED_ID, "next_hp_time", sim.time_tick_counter+ HEAL_TIME)
else:
    do set_inventory_value(SPAWNED_ID, "next_hp_time", 0)
    color = get_inventory_value(SPAWNED_ID, "color", "purple")
    go_blob = to_blob(SPAWNED_ID)
    if go_blob is not None:
        do go_blob.set("icon_color", color)
    end_if
    have ship broadcast "{obj.name} fully recovered" color "green"
end_if


pop


