# This code is for Engineering Console to select
# and communicate with objects in grid object list.
import grid_comms/damcons.mast
import grid_comms/rooms.mast
import grid_comms/marker.mast

route_grid_point("grid_point_select")
route_grid_select("grid_comms")
route_grid_focus("grid_focus")


======= grid_comms ======
#
# The grid item is selected
#
#print("{COMMS_SELECTED_ID&0xffff}")

->END if not has_role(COMMS_ORIGIN_ID, "__player__")

if has_role(COMMS_SELECTED_ID, "damcons"):
    await comms()
if has_role(COMMS_SELECTED_ID, "room"):
    await comms()
if has_role(COMMS_SELECTED_ID, "system"):
    await comms()
if has_role(COMMS_SELECTED_ID, "marker"):
    await comms()

# jump comms_damaged if has_role(COMMS_SELECTED_ID, "__damaged__")
# jump comms_undamaged if has_role(COMMS_SELECTED_ID, "__undamaged__")
#jump marker_comms if has_role(COMMS_SELECTED_ID, "marker")

comms_info("static")
->END




===== grid_point_select ====

#
# Move Marker
# 
marker_go_id = get_inventory_value(GRID_PARENT_ID, "marker_id")
marker_go = to_object(marker_go_id)
marker_blob = to_blob(marker_go_id)
->END if marker_blob is None
#
# Set main selection to first item found at location
#
go_set_at_loc = grid_objects_at(GRID_PARENT_ID, int(EVENT.source_point.x), int(EVENT.source_point.y))
ship_blob = to_blob(GRID_PARENT_ID)
->END if ship_blob is None
#


ship_blob.set("grid_selected_UID", 0, 0)
ship_blob.set("grid_selected_ship_UID", 0, 0)

#
# Move marker to location
#
marker_blob.set("curx", EVENT.source_point.x)
marker_blob.set("cury", EVENT.source_point.y)

#
# find a room, or damcons if both use room
#
found_id = None

damcons = go_set_at_loc & role("damcons")
rooms = go_set_at_loc & any_role("system, room, access")
#
# Pick damcons over rooms
#
if len(damcons)!=0:
    found_id = next(iter(damcons))
elif len(rooms)!=0:
    found_id = next(iter(rooms))


if found_id is not None:
    ship_blob.set("grid_selected_UID", found_id , 0)
    ship_blob.set("grid_selected_ship_UID", found_id , 0)

    marker_go.comms_id = "marker"
    follow_route_grid_select(GRID_PARENT_ID, found_id)
else:
    # Set the name of the marker to hallway
    marker_go.comms_id = f"hallway:{int(EVENT.source_point.x)},{int(EVENT.source_point.y)}"
    follow_route_grid_select(GRID_PARENT_ID, marker_go_id)

->END


===== grid_focus =====

cur_select = get_inventory_value(GRID_ORIGIN_ID, "click_select", 0)
if cur_select is not None and cur_select > 0:
    cur_blob = to_blob(cur_select)
    if cur_blob is not None:
        cur_scale = cur_blob.get("icon_scale", 0) 
        cur_blob.set("icon_scale", cur_scale/2,0) 

#
# Scale current selection
#
set_inventory_value(GRID_ORIGIN_ID, "click_select", GRID_SELECTED_ID)
cur_blob = to_blob(GRID_SELECTED_ID)
if cur_blob is not None:
    cur_scale = cur_blob.get("icon_scale", 0) 
    cur_blob.set("icon_scale", cur_scale*2,0) 

->END
