@map/border_war "Border War"
"Both friendly and enemy bases appear in this scenario.
" A 'neutral zone' exists between the two sides, which
" the player ship cannot enter until a declaration of
" war is received by the Comms console. An additional
" control will allow you to set how many minutes will
" pass before war is declared. Obviously, this should be
"  less than the Time Limit.


terrain_value = 0
if "few" == terrain_select:
    terrain_value = 1

if "some" == terrain_select:
    terrain_value = 2

if "lots" == terrain_select:
    terrain_value = 3

if "many" == terrain_select:
    terrain_value = 4


lethal_value = 0
if "few" == lethal_select:
    lethal_value = 1

if "some" == lethal_select:
    lethal_value = 2

if "lots" == lethal_select:
    lethal_value = 3

if "many" == lethal_select:
    lethal_value = 4


friendly_value = 0
if "few" == friendly_select:
    friendly_value = 1

if "some" == friendly_select:
    friendly_value = 2

if "lots" == friendly_select:
    friendly_value = 3

if "many" == friendly_select:
    friendly_value = 4


monster_value = 0
if "few" == monster_select:
    monster_value = 1

if "some" == monster_select:
    monster_value = 2

if "lots" == monster_select:
    monster_value = 3

if "many" == monster_select:
    monster_value = 4


upgrade_value = 0
num_upgrade = 0
if "few" == upgrade_select:
    upgrade_value = 1
    num_upgrade = random.randint(1,3)

if "some" == upgrade_select:
    upgrade_value = 2
    num_upgrade = random.randint(3,5)

if "lots" == upgrade_select:
    upgrade_value = 3
    num_upgrade = random.randint(5,10)

if "many" == upgrade_select:
    upgrade_value = 4
    num_upgrade = random.randint(10,15)

if seed_value != 0:
    random.seed(seed_value)
    print(f"Seed Value: {seed_value}")
else:
    seed_value = random.randint(1,99999)
    random.seed(seed_value)
    print(f"Random Seed Value: {seed_value}")

#------------------------------------------------------------------------------------------------------------
# Add the "Neutral Zone" 

sim.add_navarea(0, 500000, 20000, 500000, 0, -500000, 20000, -500000, "Neutral Zone", "#004")


#------------------------------------------------------------------------------------------------------------
# Determine Enemy Antagonists

enemyTypeNameList = ["Kralien", "Torgoth", "Arvonian"]
enemy_temp = []
enemy_temp = random.choices(enemyTypeNameList, weights=(50, 25, 25))
enemy1 = enemy_temp[0]

#------------------------------------------------------------------------------------------------------------
# Build friendly stations
terrain_spawn_stations(difficulty, lethal_value, 21000, 65000)
#------------------------------------------------------------------------------------------------------------
# wait for the creation of the player ships
await task_schedule(spawn_friendly_npc)

#------------------------------------------------------------------------------------------------------------
# Build enemy stations, generate fleets

enemy_station_list = []
navpoint_list = []
enemy_station_dict = {}

pos = Vec3()
startZ = -50000

fleet_index = int(difficulty) - 1

num_enemy_stations = int(difficulty)
if num_enemy_stations < 3:
    num_enemy_stations = 3
station_step = 100000/num_enemy_stations

if enemy1 == "Kralien":
    station_prefix = "KB"
    station_type = "starbase_kralien"
if enemy1 == "Torgoth": 
    station_prefix = "TB"
    station_type = "starbase_torgoth"
if enemy1 == "Arvonian":
    station_prefix = "AB"
    station_type = "starbase_arvonian"

# for each station
for index in range(num_enemy_stations):

    pos.x = -(random.random()*25000+25000)
    pos.y = random.random()*2000-1000
    pos.z = startZ + random.random()*station_step/3  -   station_step/6
#    _spawned_pos.append(pos)
    startZ += station_step

    #make the station ----------------------------------
    name = "{station_prefix} {index+1}"

    if enemy1 == "Kralien":
        enemy_station_object = npc_spawn(*pos, name, "kralien, enemy, station", station_type, "behav_station")
    if enemy1 == "Torgoth":
        enemy_station_object = npc_spawn(*pos, name, "torgoth, enemy, station", station_type, "behav_station")
    if enemy1 == "Arvonian":
        enemy_station_object = npc_spawn(*pos, name, "arvonian, enemy, station", station_type, "behav_station")
    nav_id = sim.add_navpoint(*pos, name, "#A44")
    enemy_station_list.append(to_id(enemy_station_object))
    navpoint_list.append(nav_id)
    enemy_station_dict[to_id(enemy_station_object)] = nav_id

    if enemy1 == "Kralien":
        set_face(to_id(enemy_station_object), random_kralien())
    if enemy1 == "Torgoth":
        set_face(to_id(enemy_station_object), random_torgoth())
    if enemy1 == "Arvonian":
        set_face(to_id(enemy_station_object), random_arvonian())

    print(f"{enemy1} Station created: {int(pos.x)}, {int(pos.y)}, {int(pos.z)}")

    apos = Vec3()
    apos.x = pos.x + 50.0
    apos.z = pos.z + 50.0

    create_siege_fleet(enemy1, fleet_index, apos.x, apos.y, apos.z)





#------------------------------------------------------------------------------------------------------------
#
## make a few random clusters of nebula
#
t_min = terrain_value * 6
t_max = t_min * 2
spawn_points = scatter.box(random.randint(t_min,t_max), 0,0,0, 100000, 1000, 100000, centered=True)
for v in spawn_points:
    cluster_spawn_points = scatter_sphere(random.randint(terrain_value*2,terrain_value*4), v.x, 0,v.z, 1000, 10000, ring=False)
    for v2 in cluster_spawn_points:
        v2.y = v2.y % 500.0
        nebula = terrain_spawn(v2.x, v2.y, v2.z,None, "#, nebula", "nebula", "behav_nebula")
        nebula.blob.set("local_scale_x_coeff", random.uniform(1.0, 5.5))
        nebula.blob.set("local_scale_y_coeff", random.uniform(1.0, 5.5))
        nebula.blob.set("local_scale_z_coeff", random.uniform(1.0, 5.5))


#------------------------------------------------------------------------------------------------------------
# make a few random clusters of Asteroids
terrain_asteroid_clusters(terrain_value)        

        

#------------------------------------------------------------------------------------------------------------
# I want candy

#Uncomment to see upgrade debug logs
#logger("upgrades")
log(f"Number of Upgrades: {num_upgrade}", "upgrades")

spawn_points = scatter.box(num_upgrade, 0,0,0, 75000, 1000, 75000, centered=True)
for v in spawn_points:
    upg = random.randint(1,9)
    if upg == 1:
        pickup_spawn(v.x, v.y, v.z, "carapaction_coil")
        log(f"Carapaction Coil spawned {v.x},{v.y},{v.z}", "upgrades")

    if upg == 2:
        pickup_spawn(v.x, v.y, v.z,  "infusion_pcoils")
        log(f"Infusion P-Coil spawned {v.x},{v.y},{v.z}", "upgrades")

    if upg == 3:
        pickup_spawn(v.x, v.y, v.z, "tauron_focuser")
        log(f"Tauron Focuser spawned {v.x},{v.y},{v.z}","upgrades")

    if upg == 4:
        pickup_spawn(v.x, v.y, v.z, "secret_codecase")
        log("Secret Codecase spawned {v.x},{v.y},{v.z}","upgrades")

    if upg == 5:
        pickup_spawn(v.x, v.y, v.z, "hidens_powercell")
        log(f"HiDens Powercell spawned {v.x},{v.y},{v.z}","upgrades")

    if upg == 6:
        pickup_spawn(v.x, v.y, v.z, "vigoranium_nodule")
        log(f"Vigoranium Nodule spawned {v.x},{v.y},{v.z}","upgrades")

    if upg == 7:
        pickup_spawn(v.x, v.y, v.z, "cetrocite_crystal")
        log(f"Cetrocite Crystal spawned {v.x},{v.y},{v.z}","upgrades")

    if upg == 8:
        pickup_spawn(v.x, v.y, v.z, "lateral_array")
        log("Lateral Array spawned {v.x},{v.y},{v.z}", "upgrades")

    if upg == 9:
        pickup_spawn(v.x, v.y, v.z, "haplix_overcharger")
        log("Haplix Overcharger spawned {v.x},{v.y},{v.z}","upgrades")

spawn_points = scatter.box(monster_value, 0,0,0, 75000, 1000, 75000, centered=True)
for v in spawn_points:
    typhon_classic_spawn(*v.xyz)

#------------------------------------------------------------------------------------------------------------

players = all_roles('__player__, tsn')
war_delay = int(war_time_delay)

if war_delay == 0:
    comms_broadcast(players, "WAR HAS BEEN DECLARED!", "yellow")
    for p in players:
        comms_receive_internal(f"""WAR HAS BEEN DECLARED!""", p, "TSN Command", title="WAR DECLARED", title_color="yellow")
    war_declared = 1
    ->END

shared war_declared = 0
task_schedule(war_timer_loop)
task_schedule(check_neutral_zone)
task_schedule(task_borderwar_end_game)
->END

======= war_timer_loop =========
if war_declared >= 1:
    ->END

if war_delay == int(war_time_delay):
    # Send "WAR IN X MINUTES!" message to all player ships.
    comms_broadcast(players, f"""WAR STARTS IN {war_delay} MINUTES!""", "yellow")
    for p in players:
        comms_receive_internal(f"""WAR STARTS IN {war_delay} MINUTES!""", p, "TSN Command", title="PREPARE FOR WAR", title_color="yellow")

if war_delay == 5:
    # Send 5-minute warning.
    comms_broadcast(players, "WAR STARTS IN 5 MINUTES!", "yellow")
    for p in players:
        comms_receive_internal(f"""WAR STARTS IN 5 MINUTES!""", p, "TSN Command", title="WAR 5 MIN", title_color="yellow")

if war_delay == 1:
    # Send 1-minute warning.
    comms_broadcast(players, "WAR IMMINENT!", "yellow")
    for p in players:
        comms_receive_internal(f"""WAR STARTS IN 1 MINUTE!""", p, "TSN Command", title="WAR IMMINENT", title_color="yellow")

war_delay -= 1
await delay_sim(seconds=60)

if war_delay == 0:
    comms_broadcast(players, "WAR DECLARED!", "yellow")
    for p in players:
        comms_receive_internal(f"""WAR HAS BEEN DECLARED!""", p, "TSN Command", title="WAR DECLARED", title_color="yellow")
    war_declared = 1
    ->END
else:   
    jump war_timer_loop

====== check_neutral_zone =======
if war_declared == 1:
    ->END
for p in players:
    eo = to_engine_object(p)
    print(f"Player Position: {int(eo.pos.x)}, {int(eo.pos.y)}, {int(eo.pos.z)}")
    if eo.pos.x <= 20000:
        war_declared = 2

if war_declared == 2:
    comms_broadcast(players, "NEUTRAL ZONE VIOLATION", "red")
    for p in players:
        comms_receive_internal(f"""NEUTRAL ZONE VIOLATION - Mission Failed!""", p, "TSN Command", title="NETURAL ZONE VIOLATION", title_color="red")
    await delay_sim(seconds=6)
    war_declared = 3
#    task_schedule(task_end_game)
    ->END

await delay_sim(seconds=5)
jump check_neutral_zone







