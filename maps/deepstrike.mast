@map/deep_strike "Deep Strike"
" There are no friendly bases in this scenario,
" just a friendly bulk cargo ship that can resupply
" the player ship(s). The player ship(s) are launching
" an assault into enemy territory, which is defended by enemy bases.


terrain_value = 0
if "few" == terrain_select:
    terrain_value = 1

if "some" == terrain_select:
    terrain_value = 2

if "lots" == terrain_select:
    terrain_value = 3

if "many" == terrain_select:
    terrain_value = 4


lethal_value = 0
if "few" == lethal_select:
    lethal_value = 1

if "some" == lethal_select:
    lethal_value = 2

if "lots" == lethal_select:
    lethal_value = 3

if "many" == lethal_select:
    lethal_value = 4


friendly_value = 0
#if "few" == friendly_select:
#    friendly_value = 1
#
#if "some" == friendly_select:
#    friendly_value = 2
#
#if "lots" == friendly_select:
#    friendly_value = 3
#
#if "many" == friendly_select:
#    friendly_value = 4


monster_value = 0
if "few" == monster_select:
    monster_value = 1

if "some" == monster_select:
    monster_value = 2

if "lots" == monster_select:
    monster_value = 3

if "many" == monster_select:
    monster_value = 4


upgrade_value = 0
num_upgrade = 0
if "few" == upgrade_select:
    upgrade_value = 1
    num_upgrade = random.randint(1,3)

if "some" == upgrade_select:
    upgrade_value = 2
    num_upgrade = random.randint(3,5)

if "lots" == upgrade_select:
    upgrade_value = 3
    num_upgrade = random.randint(5,10)

if "many" == upgrade_select:
    upgrade_value = 4
    num_upgrade = random.randint(10,15)

if seed_value != 0:
    random.seed(seed_value)
    print(f"Seed Value: {seed_value}")
else:
    seed_value = random.randint(1,99999)
    random.seed(seed_value)
    print(f"Random Seed Value: {seed_value}")

#------------------------------------------------------------------------------------------------------------
# Determine Enemy Antagonists

enemyTypeNameList = ["Kralien", "Torgoth", "Arvonian"]
enemy_temp = []
enemy_temp = random.choices(enemyTypeNameList, weights=(50, 25, 25))
enemy1 = enemy_temp[0]

#------------------------------------------------------------------------------------------------------------
# Reposition Player Ship, spawn Cargo Tender

new_pos = Vec3(20500,0,1800)
tanker = to_id(npc_spawn(*new_pos, f"TSN Ganymede", "tsn, friendly, resupply_tanker", "transport_ship", "behav_npcship"))
set_face(tanker, random_terran())

await task_schedule(spawn_players)

print(f"Deep Strike: Reposition Player")
new_pos = Vec3(20000,0,1500)

my_players = to_object_list(role("__player__"))
for player in my_players:
    player.pos = new_pos


#------------------------------------------------------------------------------------------------------------
# Build enemy stations, generate fleets

fleet_index = int(difficulty) - 1

num_enemy_stations = int(difficulty)
if num_enemy_stations < 3:
    num_enemy_stations = 3
num = 1
_enemy_spawned_pos = []

if enemy1 == "Kralien":
    station_prefix = "KB"
    station_type = "starbase_kralien"
if enemy1 == "Torgoth": 
    station_prefix = "TB"
    station_type = "starbase_torgoth"
if enemy1 == "Arvonian":
    station_prefix = "AB"
    station_type = "starbase_arvonian"

enemy_spawn_points = scatter.box(10000, -100,1000,50000, -50000, -1000, -50000, centered=False)

for enemy_station in enemy_spawn_points:
    name = "{station_prefix} {num}"
    #
    # Space stations
    #
    _enpos = enemy_station
    dist = 15000 * 15000
    move = True
    for x while move:
        move = False
        for _enprev in _enemy_spawned_pos:
            distv = _enpos - _enprev
            _dist_test = distv.dot(distv)
            if _dist_test < dist:
                move = True
                #print("Move Station")
                _enpos = next(enemy_spawn_points)
                break
    _enemy_spawned_pos.append(_enpos)

    if enemy1 == "Kralien":
        enemy_station_object = npc_spawn(*_enpos, name, "kralien, station", station_type, "behav_station")
    if enemy1 == "Torgoth":
        enemy_station_object = npc_spawn(*_enpos, name, "torgoth, station", station_type, "behav_station")
    if enemy1 == "Arvonian":
        enemy_station_object = npc_spawn(*_enpos, name, "arvonian, station", station_type, "behav_station")
    sim.add_navpoint(*_enpos, name, "#A44")

    print(f"{enemy1} Station created: {int(_enpos.x)}, {int(_enpos.y)}, {int(_enpos.z)}")
    
    ds = to_id(enemy_station_object)
    apos = enemy_station_object.engine_object.pos
    apos.x = apos.x + 50.0
    apos.z = apos.z + 50.0

    if enemy1 == "Kralien":
        set_face(ds, random_kralien())
    if enemy1 == "Torgoth":
        set_face(ds, random_torgoth())
    if enemy1 == "Arvonian":
        set_face(ds, random_arvonian())
    
    create_siege_fleet(enemy1, fleet_index, apos.x, apos.y, apos.z)

    #print(f"{enemy1} Fleet created {int(apos.x)} {int(apos.y)} {int(apos.z)}")

    break if num == num_enemy_stations
    num += 1


#------------------------------------------------------------------------------------------------------------
#
## make a few random clusters of nebula
#
t_min = terrain_value * 6
t_max = t_min * 2
spawn_points = scatter.box(random.randint(t_min,t_max), 0,0,0, 100000, 1000, 100000, centered=True)
for v in spawn_points:
    cluster_spawn_points = scatter_sphere(random.randint(terrain_value*2,terrain_value*4), v.x, 0,v.z, 1000, 10000, ring=False)
    for v2 in cluster_spawn_points:
        v2.y = v2.y % 500.0
        nebula = terrain_spawn(v2.x, v2.y, v2.z,None, "#, nebula", "nebula", "behav_nebula")
        nebula.blob.set("local_scale_x_coeff", random.uniform(1.0, 5.5))
        nebula.blob.set("local_scale_y_coeff", random.uniform(1.0, 5.5))
        nebula.blob.set("local_scale_z_coeff", random.uniform(1.0, 5.5))


#------------------------------------------------------------------------------------------------------------
# make a few random clusters of Asteroids

t_min = terrain_value * 7
t_max = t_min * 3
spawn_points = scatter.box(random.randint(t_min,t_max), 0,0,0, 100000, 1000, 100000, centered=True)

asteroid_types = ship_data_plain_asteroid_keys()
for v in spawn_points:
    
    amount = random.randint(t_min+10,t_max+10)
    # the more you have give a bit more space
    ax = random.randint(-20,20)
    ay = random.randint(-150,150)
    az = random.randint(-20,20)
    #cluster_spawn_points = scatter_box(amount, v.x, 0,v.z, amount*50, amount*20,amount*200, centered=True, ax, ay, az )
    cluster_spawn_points = scatter_box(amount,  v.x, 0,v.z, amount*50, amount*5,amount*200, True, 0, ay, 0 )

    for v2 in cluster_spawn_points:
        a_type = random.choice(asteroid_types)

        asteroid = terrain_spawn(v2.x, v2.y, v2.z,None, "#,asteroid", a_type, "behav_asteroid")
        asteroid.engine_object.steer_yaw = random.uniform(0.0001, 0.003)
        asteroid.engine_object.steer_pitch = -random.uniform(0.0001, 0.003)
        asteroid.engine_object.steer_roll = random.uniform(0.0001, 0.003)

        sx = random.uniform(0.8, 3.5)
        sy = random.uniform(0.8, 3.5)
        sz = random.uniform(0.8, 3.5)
        sm = max(sx, sy)
        sm = max(sm, sz)
        #er = asteroid.blob.get("exclusionradius",0)
        #er *= sm

        asteroid.blob.set("local_scale_x_coeff", sx)
        asteroid.blob.set("local_scale_y_coeff", sy)
        asteroid.blob.set("local_scale_z_coeff", sz)
        #asteroid.blob.set("exclusionradius", er)
        

#------------------------------------------------------------------------------------------------------------
# I want candy

#Uncomment to see upgrade debug logs
#logger("upgrades")
log(f"Number of Upgrades: {num_upgrade}", "upgrades")

spawn_points = scatter.box(num_upgrade, 0,0,0, 75000, 1000, 75000, centered=True)
for v in spawn_points:
    upg = random.randint(1,9)
    if upg == 1:
        pickup_spawn(v.x, v.y, v.z, "carapaction_coil")
        log(f"Carapaction Coil spawned {v.x},{v.y},{v.z}", "upgrades")

    if upg == 2:
        pickup_spawn(v.x, v.y, v.z,  "infusion_pcoils")
        log(f"Infusion P-Coil spawned {v.x},{v.y},{v.z}", "upgrades")

    if upg == 3:
        pickup_spawn(v.x, v.y, v.z, "tauron_focuser")
        log(f"Tauron Focuser spawned {v.x},{v.y},{v.z}","upgrades")

    if upg == 4:
        pickup_spawn(v.x, v.y, v.z, "secret_codecase")
        log("Secret Codecase spawned {v.x},{v.y},{v.z}","upgrades")

    if upg == 5:
        pickup_spawn(v.x, v.y, v.z, "hidens_powercell")
        log(f"HiDens Powercell spawned {v.x},{v.y},{v.z}","upgrades")

    if upg == 6:
        pickup_spawn(v.x, v.y, v.z, "vigoranium_nodule")
        log(f"Vigoranium Nodule spawned {v.x},{v.y},{v.z}","upgrades")

    if upg == 7:
        pickup_spawn(v.x, v.y, v.z, "cetrocite_crystal")
        log(f"Cetrocite Crystal spawned {v.x},{v.y},{v.z}","upgrades")

    if upg == 8:
        pickup_spawn(v.x, v.y, v.z, "lateral_array")
        log("Lateral Array spawned {v.x},{v.y},{v.z}", "upgrades")

    if upg == 9:
        pickup_spawn(v.x, v.y, v.z, "haplix_overcharger")
        log("Haplix Overcharger spawned {v.x},{v.y},{v.z}","upgrades")


#wr = terrain_spawn(200, 0, 600, "Wreck", "wreck", "wreck", "behav_asteroid")
#temp_yaw = random.uniform(0.001, 0.003)
#temp_pitch = random.uniform(0.002, 0.004)
#wr.engine_object.steer_yaw = temp_yaw
#wr.engine_object.steer_pitch = temp_pitch
#wr.blob.set("radar_color_override", "#f0c")



spawn_points = scatter.box(monster_value, 0,0,0, 75000, 1000, 75000, centered=True)
for v in spawn_points:
    typhon_classic_spawn(*v.xyz)

task_schedule(task_end_game)

#------------------------------------------------------------------------------------------------------------
# At the start of the Deep Strike scenario, the player can request a HiDens Power Cell and an extra nuke from the Resupply Tanker.
# Every five minutes, they can request another HiDens Power Cell and another nuke. The Tanker will drop the power cell behind it,
# but to get the nuke, the player ship has to be within 600m. 


shared resupply_energy = 0
shared resupply_nuke = 0
-> END

//comms if has_roles(COMMS_SELECTED_ID, 'resupply_tanker') 
+ "Energy Cell":
    if resupply_energy == 0:
        eo = to_engine_object(COMMS_SELECTED_ID)
        _pos_eo = eo.pos
        _offset = eo.forward_vector()
        _pos = _pos_eo + (_offset * -100)
        comms_receive_internal(f"""HiDens Energy Cell deployed.""", COMMS_ORIGIN_ID, "TSN Ganymede", title="Energy Cell", title_color="green")
        pickup_spawn(_pos.x, _pos.y, _pos.z, "hidens_powercell")
        resupply_energy = 5
        jump resupply_energy_delay
    else:
        comms_receive_internal(f"""We're working on it, {COMMS_ORIGIN.name}. Energy Cell will be ready in {resupply_energy} minutes.""", COMMS_ORIGIN_ID, "TSN Ganymede", title="Energy Cell Not Ready", title_color="green")

//comms if has_roles(COMMS_SELECTED_ID, 'resupply_tanker') 
+ "Transfer Nuke":
    if resupply_nuke == 0:
        dist = sbs.distance_id(COMMS_ORIGIN_ID,COMMS_SELECTED_ID)
        if dist >= 600:
            # Comms message, must be within 600m to transfer nuke
            comms_receive_internal(f"""You're too far away, {COMMS_ORIGIN.name}. You need to be within 600m to transfer.""", COMMS_ORIGIN_ID, "TSN Ganymede", title="Too Far", title_color="green")
        else:
            # Add +1 nuke to player ship, Comms message to confirm transfer.
            player_blob = to_blob(COMMS_ORIGIN_ID)
            addtorp = player_blob.get(f"Nuke_NUM", 0)
            addtorp += 1
            player_blob.set(f"Nuke_NUM", addtorp, 0)
            comms_receive_internal(f"""Nuclear torpedo transfer complete. Good luck, {COMMS_ORIGIN.name}!""", COMMS_ORIGIN_ID, "TSN Ganymede", title="Nuke Transferred", title_color="green")
            resupply_nuke = 5
            jump resupply_nuke_delay
    else:
        comms_receive_internal(f"""We're working on it, {COMMS_ORIGIN.name}. Nuke will be ready in {resupply_nuke} minutes.""", COMMS_ORIGIN_ID, "TSN Ganymede", title="Nuke Not Ready", title_color="green")
 

====== resupply_energy_delay ======
await delay_sim(seconds=60)
resupply_energy -= 1
if resupply_energy == 0:
    ->END
else:
    jump resupply_energy_delay

====== resupply_nuke_delay ======
await delay_sim(seconds=60)
resupply_nuke -= 1
if resupply_nuke == 0:
    ->END
else:
    jump resupply_nuke_delay
