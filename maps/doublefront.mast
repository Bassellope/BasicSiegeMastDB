@map/double_front "Double Front"
"Bases are in a corner, protected by dense minefields
" while the enemies advance from two sides. This layout
" (especially with minefields) makes for a complex terrain
" situation, but isn't as open as a one-front layout.


terrain_value = 0
if "few" == terrain_select:
    terrain_value = 1

if "some" == terrain_select:
    terrain_value = 2

if "lots" == terrain_select:
    terrain_value = 3

if "many" == terrain_select:
    terrain_value = 4


lethal_value = 0
if "few" == lethal_select:
    lethal_value = 1

if "some" == lethal_select:
    lethal_value = 2

if "lots" == lethal_select:
    lethal_value = 3

if "many" == lethal_select:
    lethal_value = 4


friendly_value = 0
if "few" == friendly_select:
    friendly_value = 1

if "some" == friendly_select:
    friendly_value = 2

if "lots" == friendly_select:
    friendly_value = 3

if "many" == friendly_select:
    friendly_value = 4


monster_value = 0
if "few" == monster_select:
    monster_value = 1

if "some" == monster_select:
    monster_value = 2

if "lots" == monster_select:
    monster_value = 3

if "many" == monster_select:
    monster_value = 4


upgrade_value = 0
num_upgrade = 0
if "few" == upgrade_select:
    upgrade_value = 1
    num_upgrade = random.randint(1,3)

if "some" == upgrade_select:
    upgrade_value = 2
    num_upgrade = random.randint(3,5)

if "lots" == upgrade_select:
    upgrade_value = 3
    num_upgrade = random.randint(5,10)

if "many" == upgrade_select:
    upgrade_value = 4
    num_upgrade = random.randint(10,15)




if seed_value != 0:
    random.seed(seed_value)
    print(f"Seed Value: {seed_value}")
else:
    seed_value = random.randint(1,99999)
    random.seed(seed_value)
    print(f"Random Seed Value: {seed_value}")


#------------------------------------------------------------------------------------------------------------

terrain_spawn_stations(difficulty, lethal_value)
await task_schedule(spawn_friendly_npc)

#------------------------------------------------------------------------------------------------------------
# generate fleets
# For Single Front, one enemy is randomly chosen as the attacker, so all fleets will be chosen from that enemy.
# For Double Front, two enemies are randomly choseen, each attacking from a different direction. Same enemy may be chosen twice.

enemyTypeNameList = ["Kralien", "Torgoth", "Arvonian", "Ximni"]
enemy_temp = []
enemy_temp = random.choices(enemyTypeNameList, weights=(40, 20, 20, 20))
enemy1 = enemy_temp[0]
enemy_temp = random.choices(enemyTypeNameList, weights=(40, 20, 20, 20))
enemy2 = enemy_temp[0]

# Pick a random direction for both attackers, 1 = North, 2 = East, 3 = South, 4 = West
enemyDirectionList = [1, 2, 3, 4]
direction1 = enemyDirectionList.pop(random.randint(0,3))
print(f"Test Enemy Direction1: {direction1} Enemy List: {enemyDirectionList}")
direction2 = enemyDirectionList.pop(random.randint(0,2))
print(f"Test Enemy Direction2: {direction2} Enemy List: {enemyDirectionList}")
 
fleet_count1 = 1 + int(difficulty/2)
fleet_count2 = 1 + int(difficulty/2)
fleet_index = int(difficulty - 1)

# Ximni fleets are typically only one ship, so double fleets to balance this out until we code some better Ximni AI.
if enemy1 == "Ximni":
    fleet_count1 = fleet_count1*2 
if enemy2 == "Ximni":
    fleet_count2 = fleet_count2*2 

print(f"Fleet Count1: {fleet_count1} Enemy1: {enemy1} Direction1: {direction1} Fleet Count2: {fleet_count2} Enemy2: {enemy2} Direction2: {direction2}")

for a in range(fleet_count1):
    if direction1 == 1:
        fleet_pos = next(scatter_box(1, -40000, -1000, 40000, 40000, 1000, 50000))
    if direction1 == 2:
        fleet_pos = next(scatter_box(1, 40000, -1000, 40000, 50000, 1000, -40000))
    if direction1 == 3:
        fleet_pos = next(scatter_box(1, 40000, -1000, -40000, -40000, 1000, -50000))
    if direction1 == 4:
        fleet_pos = next(scatter_box(1, -40000, -1000, 40000, -50000, 1000, -40000))
    print(f"Fleet1 Position: {fleet_pos.x} {fleet_pos.y} {fleet_pos.z}")
    create_siege_fleet(enemy1, fleet_index, fleet_pos.x, fleet_pos.y, fleet_pos.z)

for b in range(fleet_count2):
    if direction2 == 1:
        fleet_pos = next(scatter_box(1, -40000, -1000, 40000, 40000, 1000, 50000))
    if direction2 == 2:
        fleet_pos = next(scatter_box(1, 40000, -1000, 40000, 50000, 1000, -40000))
    if direction2 == 3:
        fleet_pos = next(scatter_box(1, 40000, -1000, -40000, -40000, 1000, -50000))
    if direction2 == 4:
        fleet_pos = next(scatter_box(1, -40000, -1000, 40000, -50000, 1000, -40000))
    print(f"Fleet2 Position: {fleet_pos.x} {fleet_pos.y} {fleet_pos.z}")
    create_siege_fleet(enemy2, fleet_index, fleet_pos.x, fleet_pos.y, fleet_pos.z)


# At this time, keep the Skaraans out of a Single Front mission
#    if a > 1 and difficulty > 2:
#        fleet_pos = Vec3.rand_in_sphere(39990, 40000, False, True)
#        create_npc_fleet_and_ships("skaraan", 1,0, fleet_pos.x, fleet_pos.y, fleet_pos.z)
#        create_siege_fleet("Skaraan", fleet_index, fleet_pos.x, fleet_pos.y, fleet_pos.z)


#------------------------------------------------------------------------------------------------------------
#
## make a few random clusters of nebula
#
t_min = terrain_value * 6
t_max = t_min * 2
spawn_points = scatter.box(random.randint(t_min,t_max), 0,0,0, 100000, 1000, 100000, centered=True)
for v in spawn_points:
    cluster_spawn_points = scatter_sphere(random.randint(terrain_value*2,terrain_value*4), v.x, 0,v.z, 1000, 10000, ring=False)
    for v2 in cluster_spawn_points:
        v2.y = v2.y % 500.0
        nebula = terrain_spawn(v2.x, v2.y, v2.z,None, "#, nebula", "nebula", "behav_nebula")
        nebula.blob.set("local_scale_x_coeff", random.uniform(1.0, 5.5))
        nebula.blob.set("local_scale_y_coeff", random.uniform(1.0, 5.5))
        nebula.blob.set("local_scale_z_coeff", random.uniform(1.0, 5.5))


#------------------------------------------------------------------------------------------------------------
# make a few random clusters of Asteroids
terrain_asteroid_clusters(terrain_value)                

#------------------------------------------------------------------------------------------------------------
# I want candy

#Uncomment to see upgrade debug logs
#logger("upgrades")
log(f"Number of Upgrades: {num_upgrade}", "upgrades")

spawn_points = scatter.box(num_upgrade, 0,0,0, 75000, 1000, 75000, centered=True)
for v in spawn_points:
    upg = random.randint(1,9)
    if upg == 1:
        pickup_spawn(v.x, v.y, v.z, "carapaction_coil")
        log(f"Carapaction Coil spawned {v.x},{v.y},{v.z}", "upgrades")

    if upg == 2:
        pickup_spawn(v.x, v.y, v.z,  "infusion_pcoils")
        log(f"Infusion P-Coil spawned {v.x},{v.y},{v.z}", "upgrades")

    if upg == 3:
        pickup_spawn(v.x, v.y, v.z, "tauron_focuser")
        log(f"Tauron Focuser spawned {v.x},{v.y},{v.z}","upgrades")

    if upg == 4:
        pickup_spawn(v.x, v.y, v.z, "secret_codecase")
        log("Secret Codecase spawned {v.x},{v.y},{v.z}","upgrades")

    if upg == 5:
        pickup_spawn(v.x, v.y, v.z, "hidens_powercell")
        log(f"HiDens Powercell spawned {v.x},{v.y},{v.z}","upgrades")

    if upg == 6:
        pickup_spawn(v.x, v.y, v.z, "vigoranium_nodule")
        log(f"Vigoranium Nodule spawned {v.x},{v.y},{v.z}","upgrades")

    if upg == 7:
        pickup_spawn(v.x, v.y, v.z, "cetrocite_crystal")
        log(f"Cetrocite Crystal spawned {v.x},{v.y},{v.z}","upgrades")

    if upg == 8:
        pickup_spawn(v.x, v.y, v.z, "lateral_array")
        log("Lateral Array spawned {v.x},{v.y},{v.z}", "upgrades")

    if upg == 9:
        pickup_spawn(v.x, v.y, v.z, "haplix_overcharger")
        log("Haplix Overcharger spawned {v.x},{v.y},{v.z}","upgrades")


#wr = terrain_spawn(200, 0, 600, "Wreck", "wreck", "wreck", "behav_asteroid")
#temp_yaw = random.uniform(0.001, 0.003)
#temp_pitch = random.uniform(0.002, 0.004)
#wr.engine_object.steer_yaw = temp_yaw
#wr.engine_object.steer_pitch = temp_pitch
#wr.blob.set("radar_color_override", "#f0c")



spawn_points = scatter.box(monster_value, 0,0,0, 75000, 1000, 75000, centered=True)
for v in spawn_points:
    typhon_classic_spawn(*v.xyz)


task_schedule(task_end_game)
#------------------------------------------------------------------------------------------------------------

