default shared SIMPLE_INTERNAL = True


//enable/comms if has_role(COMMS_ORIGIN_ID, '__player__') and COMMS_SELECTED_ID == 0
    tsn_command = lifeform_spawn("TSN Command", random_terran(civilian=True), "tsn",0, path="//comms/tsn_command")

//comms/tsn_command if has_role(COMMS_ORIGIN_ID, '__player__') and COMMS_SELECTED_ID == 0
    +"Back" //comms/comms_badge
    +"Request reinforcements" tsn_command_reinforcements
        

=== tsn_command_reinforcements
    comms_navigate("//comms/comms_badge")
    with comms_override(COMMS_ORIGIN_ID, COMMS_LIFEFORM_ID):
        >> "Request reinforcements"
            % We could really use some help
            % Please send reinforcements
            % Need help! Send a fleet

    await delay_sim(10)

    with comms_override(COMMS_ORIGIN_ID, COMMS_LIFEFORM_ID):
        << "Reinforcements denied"
            % You're on your own, no units available
            % The nearest fleet won't get there in time
            % A small fleet is on the way, but they're days out





//enable/comms if has_roles(COMMS_SELECTED_ID, '__PLAYER__') and (COMMS_SELECTED_ID == COMMS_ORIGIN_ID)


//comms if ((COMMS_SELECTED_ID == COMMS_ORIGIN_ID) and has_roles(COMMS_ORIGIN_ID, 'tsn,__PLAYER__')) and SIMPLE_INTERNAL

default sickbay_face = random_terran()
=$sickbay blue,white,sickbay_face
default security_face = random_terran()
=$security red,white,security_face
default biology_face = random_terran()
=$biology cyan,white,biology_face
default counselor_face = random_terran()
=$counselor gold,white,counselor_face

+[$sickbay] "Sickbay" //comms/internal/sickbay
+[$security] "Security" //comms/internal/security
+[$biology] "Exobiology" //comms/internal/exobiology
+[$counselor]"Counselor" //comms/internal/counselor 
    


//comms/internal/sickbay if ((COMMS_SELECTED_ID == COMMS_ORIGIN_ID)and has_roles(COMMS_ORIGIN_ID, 'tsn,__PLAYER__'))
    + !1 ^1 "Back" //comms
    + "Flash message" //comms/flash_message_test if is_dev_build()
    
    + "Status":
        <<[$sickbay] "Sickbay status"
            % No serious injuries currently 
            % Sickbay is ready when needed

//comms/internal/security if ((COMMS_SELECTED_ID == COMMS_ORIGIN_ID)and has_roles(COMMS_ORIGIN_ID, 'tsn,__PLAYER__'))
    + "Back" //comms
    + "Status":
        <<[$security] "Security update"
            % All secure
            % All quiet on the port bow
            % Times like this boring is good

//comms/internal/exobiology if ((COMMS_SELECTED_ID == COMMS_ORIGIN_ID)and has_roles(COMMS_ORIGIN_ID, 'tsn,__PLAYER__'))
+"Back" //comms
default pathogen_test = None
+"Test for pathogen" if pathogen_test is None:
    <<[$biology] "exobiology Potential biohazard"
        "Testing running, one moment

    # It is best to schedule delayed responses so the comms buttons are not stalled
    pathogen_test = sub_task_schedule(test_finished)

+"Cancel pathogen test" if pathogen_test is not None:
    task_cancel(pathogen_test)
    pathogen_test  = None
    <<[$biology] "exobiology Potential biohazard"
        "pathogen test aborted, per request

+"Status of pathogen test" if pathogen_test is not None:
    <<[$biology] "exobiology Potential biohazard"
        "Testing still running, one moment

//comms/internal/counselor if ((COMMS_SELECTED_ID == COMMS_ORIGIN_ID)and has_roles(COMMS_ORIGIN_ID, 'tsn,__PLAYER__'))
+"Back" //comms

+ "Status":
    <<[$counselor] "counselor crew update"
        "Something is disturbing the crew
    #
    # but you can delay comms, There will be no buttons during this delay
    #
    await delay_sim(seconds=3)
    <<[$counselor] "counselor crew update"
        "Things feel like they are getting worse
    




====== test_finished ======
# This is a new task to delay the response of the test results
# COMMS variables should migrate to this task

await delay_sim(seconds=10)
<<[$biology]  "exobiology biohazard test results"
    "test results finished. Tell the captain we do not have a pathogen.
pathogen_test = None
->END






=== test_info_button
    face = __MESSAGE__.get("face")
    gui_info_panel_send_message(gui_client_id(), "Thanks for pushing that button", history=False, face=face, time=3)
    ->END

=== test_info_button_cancel
    face = __MESSAGE__.get("face")
    gui_info_panel_send_message(gui_client_id(), "Sorry you didn't acknowledge", history=False, face=face, time=3)
    ->END


//comms/flash_message_test

    <var flash_message>
        % Hello, World
        % Goto to the light
        % What's doug got to do with it
        % Yesterday you said tomorrow
    
    + "Server":
        face = random_face()
        gui_info_panel_send_message(0, str(flash_message), face=face, time=3)
    + "All":
        face = random_face()
        # message would normally keep returning random
        # Because is an object
        # by calling str() it makes it a string
        all_message = str(flash_message)
        for gui in role("__gui__"):
            gui_info_panel_send_message(gui, all_message, face=face, time=3)
    + "This console":
        face = random_face()
        gui_info_panel_send_message(gui_client_id(), str(flash_message), face=face, icon_index=78+random.randint(2,6), time=3)
    + "This console with button":
        face = random_face()
        buns = [("Acknowledge", test_info_button), ("Cancel", test_info_button_cancel)]
        gui_info_panel_send_message(gui_client_id(), str(flash_message), banner="Incoming", title="You have a View screen message", title_color="pink", face=face, button=buns, history=True, time=0)
    + "This console no flash":
        face = random_face()
        gui_info_panel_send_message(gui_client_id(), str(flash_message), face=face, time=0)
    + "This console objective":
        face = random_face()
        gui_info_panel_send_message(gui_client_id(), "Some objective complete", path="objective", title="You finished something", title_color="cyan", banner="Complete", banner_color="green", time=3)
    + "This console Waterfall":
        <var chatter>
            % Some text
            % Oh this is so random
            % Pretty cool
        comms_broadcast(gui_client_id(), str(chatter))
