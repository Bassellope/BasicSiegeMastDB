@map/peacetime "Peacetime"
" This scenario appears to still be in development.
" There are very few enemy ships (none below difficulty 4,
" one or two fleets or single Skaraans on higher difficulties)
" in this scenario, although there may be monsters or quests
" for the player to complete if the appropriate Sector Options are set.


terrain_value = 0
if "few" == terrain_select:
    terrain_value = 1

if "some" == terrain_select:
    terrain_value = 2

if "lots" == terrain_select:
    terrain_value = 3

if "many" == terrain_select:
    terrain_value = 4


lethal_value = 0
if "few" == lethal_select:
    lethal_value = 1

if "some" == lethal_select:
    lethal_value = 2

if "lots" == lethal_select:
    lethal_value = 3

if "many" == lethal_select:
    lethal_value = 4


friendly_value = 0
if "few" == friendly_select:
    friendly_value = 1

if "some" == friendly_select:
    friendly_value = 2

if "lots" == friendly_select:
    friendly_value = 3

if "many" == friendly_select:
    friendly_value = 4


monster_value = 0
if "few" == monster_select:
    monster_value = 1

if "some" == monster_select:
    monster_value = 2

if "lots" == monster_select:
    monster_value = 3

if "many" == monster_select:
    monster_value = 4


upgrade_value = 0
num_upgrade = 0
if "few" == upgrade_select:
    upgrade_value = 1
    num_upgrade = random.randint(1,3)

if "some" == upgrade_select:
    upgrade_value = 2
    num_upgrade = random.randint(3,5)

if "lots" == upgrade_select:
    upgrade_value = 3
    num_upgrade = random.randint(5,10)

if "many" == upgrade_select:
    upgrade_value = 4
    num_upgrade = random.randint(10,15)




if seed_value != 0:
    random.seed(seed_value)
    print(f"Seed Value: {seed_value}")
else:
    seed_value = random.randint(1,99999)
    random.seed(seed_value)
    print(f"Random Seed Value: {seed_value}")


#------------------------------------------------------------------------------------------------------------


 _station_weights  = {"starbase_command": 3,"starbase_civil": 1,"starbase_industry": 5,"starbase_science": 1}


spawn_points = scatter.box(10000, 0,0,0, 65000, 1000, 65000, centered=True)
num = 1
total_weight = (12-difficulty) *2
_spawned_pos = []

for station in spawn_points:
    #
    # Pick a type of station
    #
    if total_weight <= 0 and num <= 5:
        total_weight = 1
        _station_weights = {"starbase_civil": 1}

    break if total_weight <= 0

    station_type = random.choice(list(_station_weights.keys()))
    station_weight = _station_weights[station_type]
    #
    #
    continue if total_weight < station_weight

    # Force big stations first
    continue if total_weight > 8 and station_weight==1

    total_weight -= station_weight

    name = "DS {num}"
    #
    # Space stations
    #
    _pos = station
    dist = 15000 * 15000
    move = True
    for x while move:
        move = False
        for _prev in _spawned_pos:
            distv = _pos - _prev
            _dist_test = distv.dot(distv)
            if _dist_test < dist:
                move = True
                #print("Move Station")
                _pos = next(spawn_points)
                break
    _spawned_pos.append(_pos)

    station_object = npc_spawn(*_pos, name, "tsn, station", station_type, "behav_station")
    #
    
    ds = to_id(station_object)
    add_role(ds, "ds" + str(num))
    apos = station_object.engine_object.pos

    #
    # Make sure not too close
    #

    set_face(ds, random_terran(civilian=True))

    #wrap a minefield around the station
    if lethal_value > 0:
        startAngle = random.randrange(0,359)
        angle = random.randrange(90,170)
        endAngle = startAngle + angle

        depth = 1#random.randrange(2,3)
        width = int(5 * lethal_value)
        widthArray = [int(angle / 5.0)]
        inner = random.randrange(1200,1500)
        cluster_spawn_points = scatter_ring(width, depth, apos.x,apos.y,apos.z, inner, inner, startAngle, endAngle)
        # Random type, but same for cluster
        # a_type = f"danger_{1}{ship_data'a'}"
        for v2 in cluster_spawn_points:
            #keep value between -500 and 500??
            terrain_spawn( v2.x, v2.y + random.randrange(-300,300), v2.z,None, None, "danger_1a", "behav_mine")
    num += 1

await task_schedule(spawn_friendly_npc)

#------------------------------------------------------------------------------------------------------------
# No enemy fleets in Peacetime
# Generate Siege Fleets - These fleets are weighted towards Kraliens (based on difficulty), from 94% Kralien at Difficulty 1 
# to 40% Kralien at Difficulty 10. The fleet lists can be found in 'map_common.py'. Skaraans are generated separately, as these 
# 'independent contractors' tend to operate better on their own. The idea is to hopefully match the 'feel' of Artemis 2.x. 
#
#enemyTypeNameList = ["Kralien", "Torgoth", "Arvonian", "Ximni"]
#
# 
#fleet_count = 3 + int(difficulty/2)
#fleet_index = int(difficulty - 1)
#
#for a in range(fleet_count):
#    enemy_temp = random.choices(enemyTypeNameList, weights=(100-6*difficulty, difficulty*2, difficulty*2, difficulty*2))
#    enemy = enemy_temp[0]
#    fleet_pos = Vec3.rand_in_sphere(39990, 40000, False, True)
#    create_npc_fleet_and_ships(enemy, fleet_quality, fleet_quality/3, fleet_pos.x, fleet_pos.y, fleet_pos.z)
#    create_siege_fleet(enemy, fleet_index, fleet_pos.x, fleet_pos.y, fleet_pos.z)
#    if a > 1 and difficulty > 2:
#        fleet_pos = Vec3.rand_in_sphere(39990, 40000, False, True)
#        create_npc_fleet_and_ships("skaraan", 1,0, fleet_pos.x, fleet_pos.y, fleet_pos.z)
#        create_siege_fleet("Skaraan", fleet_index, fleet_pos.x, fleet_pos.y, fleet_pos.z)


#------------------------------------------------------------------------------------------------------------
#
## make a few random clusters of nebula
#
t_min = terrain_value * 6
t_max = t_min * 2
spawn_points = scatter.box(random.randint(t_min,t_max), 0,0,0, 100000, 1000, 100000, centered=True)
for v in spawn_points:
    cluster_spawn_points = scatter_sphere(random.randint(terrain_value*2,terrain_value*4), v.x, 0,v.z, 1000, 10000, ring=False)
    for v2 in cluster_spawn_points:
        v2.y = v2.y % 500.0
        nebula = terrain_spawn(v2.x, v2.y, v2.z,None, "#, nebula", "nebula", "behav_nebula")
        nebula.blob.set("local_scale_x_coeff", random.uniform(1.0, 5.5))
        nebula.blob.set("local_scale_y_coeff", random.uniform(1.0, 5.5))
        nebula.blob.set("local_scale_z_coeff", random.uniform(1.0, 5.5))


#------------------------------------------------------------------------------------------------------------
# make a few random clusters of Asteroids

terrain_asteroid_clusters(terrain_value)                

#------------------------------------------------------------------------------------------------------------
# I want candy

#Uncomment to see upgrade debug logs
#logger("upgrades")
log(f"Number of Upgrades: {num_upgrade}", "upgrades")

spawn_points = scatter.box(num_upgrade, 0,0,0, 75000, 1000, 75000, centered=True)
for v in spawn_points:
    upg = random.randint(1,9)
    if upg == 1:
        pickup_spawn(v.x, v.y, v.z, "carapaction_coil")
        log(f"Carapaction Coil spawned {v.x},{v.y},{v.z}", "upgrades")

    if upg == 2:
        pickup_spawn(v.x, v.y, v.z,  "infusion_pcoils")
        log(f"Infusion P-Coil spawned {v.x},{v.y},{v.z}", "upgrades")

    if upg == 3:
        pickup_spawn(v.x, v.y, v.z, "tauron_focuser")
        log(f"Tauron Focuser spawned {v.x},{v.y},{v.z}","upgrades")

    if upg == 4:
        pickup_spawn(v.x, v.y, v.z, "secret_codecase")
        log("Secret Codecase spawned {v.x},{v.y},{v.z}","upgrades")

    if upg == 5:
        pickup_spawn(v.x, v.y, v.z, "hidens_powercell")
        log(f"HiDens Powercell spawned {v.x},{v.y},{v.z}","upgrades")

    if upg == 6:
        pickup_spawn(v.x, v.y, v.z, "vigoranium_nodule")
        log(f"Vigoranium Nodule spawned {v.x},{v.y},{v.z}","upgrades")

    if upg == 7:
        pickup_spawn(v.x, v.y, v.z, "cetrocite_crystal")
        log(f"Cetrocite Crystal spawned {v.x},{v.y},{v.z}","upgrades")

    if upg == 8:
        pickup_spawn(v.x, v.y, v.z, "lateral_array")
        log("Lateral Array spawned {v.x},{v.y},{v.z}", "upgrades")

    if upg == 9:
        pickup_spawn(v.x, v.y, v.z, "haplix_overcharger")
        log("Haplix Overcharger spawned {v.x},{v.y},{v.z}","upgrades")

spawn_points = scatter.box(monster_value, 0,0,0, 75000, 1000, 75000, centered=True)
for v in spawn_points:
    typhon_classic_spawn(*v.xyz)

if friendly_select != "none":
    jump kidnap_caper

====== kidnap_caper ======

alpha = [ "B", "C", "F", "G", "H", "J", "R", "S", "U", "V", "Y", "Z" ]
cargo_list = shipname_data.get("peacetime")
civname_list = shipname_data.get("civilian")
capname_list = shipname_data.get("captain")
clue_list = shipname_data.get("clue_list")
goods_list = shipname_data.get("tradegoods")
suspect = []

count = 1
spawn_points = scatter.box(5, 0, 0, 0, 50000, 1000, 50000, centered=True)
for c in spawn_points:
    if count >= 1 and count <= 3:    
        cargo_name = random.choice(alpha) + " " + str(random.randint(1,99)).zfill(2) + " " + cargo_list.pop(random.randrange(len(cargo_list)))
        cargo = to_id(npc_spawn(*c, cargo_name, "tsn, civilian, primary, suspect", "cargo_ship", "behav_npcship"))
    else:
        cargo_name = random.choice(alpha) + " " + str(random.randint(1,99)).zfill(2) + " " + civname_list.pop(random.randrange(len(civname_list)))
        cargo = to_id(npc_spawn(*c, cargo_name, "tsn, civilian, secondary, suspect", "cargo_ship", "behav_npcship"))
    set_face(cargo, random_terran(civilian=True))
    suspect.append(cargo)
    count += 1

suspect_list = to_object_list(role('suspect'))
suspect_list1 = to_object_list(all_roles('primary, suspect'))
suspect_list2 = to_object_list(all_roles('secondary, suspect'))
sus_count = len(suspect_list1)
-> END if sus_count == 0
# jump kidnap_lost if sus_count == 0

#shared sus_names = [s.name for s in suspect_list]
#if sus_count==1:
#    sus_names = sus_names[0]
#if sus_count==2:
#    sus_names = ", and ".join(sus_names)
#elif sus_count > 2:
#    sus_names = ",".join(sus_names[:-1])
#    sus_names += f", and {sus_names[-1]}" 

for s in suspect_list:
    _captain = capname_list.pop(random.randrange(len(capname_list)))
    cargo1 = [s.name, _captain]
    cargo2 = [s.name, _captain]
    cargo3 = [s.name, _captain]
    for x in range(4):
        alpha = ["A", "B", "C", "D", "E", "F", "G", "H", "J", "K", "M", "N", "P", "Q", "R", "S", "T", "U", "V", "X", "Y", "Z"]
        _alpha = alpha.pop(random.randrange(len(alpha)))
        _alpha += alpha.pop(random.randrange(len(alpha)))
        _alpha += alpha.pop(random.randrange(len(alpha)))
        _contents = goods_list.pop(random.randrange(len(goods_list)))
        cargo1.append(_alpha)
        cargo1.append(_contents)
        cargo2.append(_alpha)
        cargo2.append(_contents)
        cargo3.append(_alpha)
        cargo3.append(_contents)
    set_inventory_value(s, "cargo1", cargo1)
    set_inventory_value(s, "cargo2", cargo2)
    set_inventory_value(s, "cargo3", cargo3)

shared ship1_cargo1 = get_inventory_value(suspect_list[0], "cargo1")
shared ship1_cargo2 = get_inventory_value(suspect_list[0], "cargo2")
shared ship1_cargo3 = get_inventory_value(suspect_list[0], "cargo3")

shared ship2_cargo1 = get_inventory_value(suspect_list[1], "cargo1")
shared ship2_cargo2 = get_inventory_value(suspect_list[1], "cargo2")
shared ship2_cargo3 = get_inventory_value(suspect_list[1], "cargo3")

shared ship3_cargo1 = get_inventory_value(suspect_list[2], "cargo1")
shared ship3_cargo2 = get_inventory_value(suspect_list[2], "cargo2")
shared ship3_cargo3 = get_inventory_value(suspect_list[2], "cargo3")

print(f"Ship 1 Cargo")
print(ship1_cargo1)
print(ship1_cargo2)
print(ship1_cargo3)

print(f"Ship 2 Cargo")
print(ship2_cargo1)
print(ship2_cargo2)
print(ship2_cargo3)

print(f"Ship 3 Cargo")
print(ship3_cargo1)
print(ship3_cargo2)
print(ship3_cargo3)

rand1 = random.randint(0,2)
rand2 = random.randint(1,4)
kidnapper_id = suspect_list[rand1]
kidnap_clue = {}
kidnap_clue = clue_list.pop(random.randrange(len(clue_list)))
clue1 = kidnap_clue['clue']
clue2 = kidnap_clue['container']
print(f"Clue: {clue1} Container: {clue2}")

if rand1 == 0:
    add_role(suspect_list[0], "kidnapper")
    ship1_cargo1[3] = clue2
    ship1_cargo2[3] = clue2
    ship1_cargo3[3] = clue2
    temp0 = [ship1_cargo1, ship1_cargo2, ship1_cargo3]
    print(f"Ship 1 New Contents")
    print(temp0)
    set_inventory_value(suspect_list[0], "cargo1", ship1_cargo1)
if rand1 == 1:
    add_role(suspect_list[1], "kidnapper")
    ship2_cargo1[3] = clue2
    ship2_cargo2[3] = clue2
    ship2_cargo3[3] = clue2
    temp0 = [ship2_cargo1, ship2_cargo2, ship2_cargo3]
    print(f"Ship 2 New Contents")
    print(temp0)
    set_inventory_value(suspect_list[1], "cargo1", ship2_cargo1)
if rand1 == 2:
    add_role(suspect_list[2], "kidnapper")
    ship3_cargo1[3] = clue2
    ship3_cargo2[3] = clue2
    ship3_cargo3[3] = clue2
    temp0 = [ship3_cargo1, ship3_cargo2, ship3_cargo3]
    print(f"Ship 3 New Contents")
    print(temp0)
    set_inventory_value(suspect_list[2], "cargo1", ship3_cargo1)

//comms if has_roles(COMMS_SELECTED_ID, "tsn, station, ds1") 
+ "Investigate Kidnapping" //comms/investigate_kidnapping 

//comms/investigate_kidnapping  
comms_receive(f"""Ambassador Florbin has been kidnapped! We believe they were smuggled out in a cargo container. The last three ships to leave were {ship1_cargo1[0]}, {ship2_cargo1[0]}, and {ship3_cargo1[0]}. If you hurry, you might be able to catch them!^""", title="Ambassador Kidnapped", title_color=station_color)
+ "Cargo Manifest {ship1_cargo1[0]}" cargo_manifest_ship1 
+ "Cargo Manifest {ship2_cargo1[0]}" cargo_manifest_ship2 
+ "Cargo Manifest {ship3_cargo1[0]}" cargo_manifest_ship3 

===== cargo_manifest_ship1 =====
comms_receive(f"""Our records indicate {ship1_cargo1[0]} docked at this station at 08:34. It loaded^Container {ship1_cargo1[2]}: {ship1_cargo1[3]}^Container {ship1_cargo1[4]}: {ship1_cargo1[5]}^Container {ship1_cargo1[6]}: {ship1_cargo1[7]}^Container {ship1_cargo1[8]}: {ship1_cargo1[9]}^""", title="Cargo Manifest", title_color=station_color)
yield success

===== cargo_manifest_ship2 =====
comms_receive(f"""Our records indicate {ship2_cargo1[0]} docked at this station at 08:34. It loaded^Container {ship2_cargo1[2]}: {ship2_cargo1[3]}^Container {ship2_cargo1[4]}: {ship2_cargo1[5]}^Container {ship2_cargo1[6]}: {ship2_cargo1[7]}^Container {ship2_cargo1[8]}: {ship2_cargo1[9]}^""", title="Cargo Manifest", title_color=station_color)
yield success

===== cargo_manifest_ship3 =====
comms_receive(f"""Our records indicate {ship3_cargo1[0]} docked at this station at 08:34. It loaded^Container {ship3_cargo1[2]}: {ship3_cargo1[3]}^Container {ship3_cargo1[4]}: {ship3_cargo1[5]}^Container {ship3_cargo1[6]}: {ship3_cargo1[7]}^Container {ship3_cargo1[8]}: {ship3_cargo1[9]}^""", title="Cargo Manifest", title_color=station_color)
yield success

//enable/comms if has_roles(COMMS_SELECTED_ID, "tsn, suspect")

//comms if has_roles(COMMS_SELECTED_ID, "tsn, suspect") 
+ "Hail"  handle_suspect_hail

===== handle_suspect_hail ======
suspect_id = COMMS_SELECTED_ID
ship_id = COMMS_ORIGIN_ID
suspect_obj = to_object(COMMS_SELECTED_ID)
->END if suspect_obj is None

<<[green] "Hail"
    " Hello, {ship_id}.  We're moving cargo between the stations in this sector.

yield success

//enable/science if has_roles(SCIENCE_SELECTED_ID, "tsn, suspect")
//science if has_roles(SCIENCE_SELECTED_ID, "tsn, suspect")
tempcargo = get_inventory_value(SCIENCE_SELECTED_ID, "cargo3")
capname = tempcargo[1]

+ "scan":
    <scan>
        % This is a friendly merchant cargo ship.
+ "status":
    <scan>
        " No additional data available.
+ "intel":
    <scan>
        % The ship is registered to Captain {capname}.

+ "bio":
    <scan>
        % The cargo bays on this ship are shielded. You will have to get closer to get a deeper scan.


#------------------------------------------------------------------------------------------------------------

