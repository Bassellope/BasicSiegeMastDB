@map/siege "Siege"
" In this scenario, bases will be located in the center of the sector, 
" with minefields ringing the center, and enemies advancing from every 
" angle. Siege makes for a fast game, where stations are continually under threat.


# Maybe this creates another label for gui purposes?
# Or the dedent does what is right
# and this just just beyond the dedent
#properties:
#    gui_property_tab("Main", 12)
#    gui_property("player_count", "Player Ships", gui_int_slider("$text:int;low: 1.0;high:8.0"))
#    gui_property("difficulty", "Difficulty", gui_int_slider("$text:int;low: 1.0;high:11.0"))
#    gui_separator()
#    gui_property("terrain_select", "Terrain", gui_drop_down("$text: {terrain_select};list: none, few, some, lots, many"))
#    gui_property("lethal_select", "Lethal Terrain", gui_drop_down("$text: {lethal_select};list: none, few, some, lots, many"))
#    gui_property("friendly_select", "Friendly Ships", gui_drop_down("$text: {friendly_select};list: none, few, some, lots, many"))
#    gui_property("monster_select", "Monsters", gui_drop_down("$text: {monster_select};list: none, few, some, lots, many"))
#    gui_property("upgrade_select", "Upgrades", gui_drop_down("$text:{upgrade_select};list:none, few,some, lots, many"))
#    gui_property("game_time_limit", "Time Limit", gui_input("desc: Minutes;"))


terrain_value = 0
if "few" == terrain_select:
    terrain_value = 1

if "some" == terrain_select:
    terrain_value = 2

if "lots" == terrain_select:
    terrain_value = 3

if "many" == terrain_select:
    terrain_value = 4


lethal_value = 0
if "few" == lethal_select:
    lethal_value = 1

if "some" == lethal_select:
    lethal_value = 2

if "lots" == lethal_select:
    lethal_value = 3

if "many" == lethal_select:
    lethal_value = 4


friendly_value = 0
if "few" == friendly_select:
    friendly_value = 1

if "some" == friendly_select:
    friendly_value = 2

if "lots" == friendly_select:
    friendly_value = 3

if "many" == friendly_select:
    friendly_value = 4


monster_value = 0
if "few" == monster_select:
    monster_value = 1

if "some" == monster_select:
    monster_value = 2

if "lots" == monster_select:
    monster_value = 3

if "many" == monster_select:
    monster_value = 4


upgrade_value = 0
num_upgrade = 0
if "few" == upgrade_select:
    upgrade_value = 1
    num_upgrade = random.randint(1,3)

if "some" == upgrade_select:
    upgrade_value = 2
    num_upgrade = random.randint(3,5)

if "lots" == upgrade_select:
    upgrade_value = 3
    num_upgrade = random.randint(5,10)

if "many" == upgrade_select:
    upgrade_value = 4
    num_upgrade = random.randint(10,15)




if seed_value != 0:
    random.seed(seed_value)
    print(f"Seed Value: {seed_value}")
else:
    seed_value = random.randint(1,99999)
    random.seed(seed_value)
    print(f"Random Seed Value: {seed_value}")


#------------------------------------------------------------------------------------------------------------


terrain_spawn_stations(difficulty, lethal_value)
await task_schedule(spawn_friendly_npc)

#------------------------------------------------------------------------------------------------------------
# Generate Siege Fleets - These fleets are weighted towards Kraliens (based on difficulty), from 85% Kralien at Difficulty 1 
# to 22% Kralien at Difficulty 10. The fleet lists can be found in 'map_common.py'. Skaraans are generated separately, as these 
# 'independent contractors' tend to operate better on their own. The idea is to hopefully match the 'feel' of Artemis 2.x. 

enemyTypeNameList = ["Kralien", "Torgoth", "Arvonian", "Ximni"]

diff_weight = [ [85, 5, 5, 5], [82, 6, 6, 6], [79, 7, 7, 7], [76, 8, 8, 8], [70, 10, 10, 10], [64, 12, 12, 12], [58, 14, 14, 14], [46, 18, 18, 18], [34, 22, 22, 22], [22, 26, 26, 26], [10, 30, 30, 30]]
 
fleet_count = 3 + int(difficulty/2)
fleet_index = int(difficulty - 1)

for a in range(fleet_count):
    enemy_temp = random.choices(enemyTypeNameList, weights=diff_weight[fleet_index])
    enemy = enemy_temp[0]
    fleet_pos = Vec3.rand_in_sphere(39990, 40000, False, True)
    create_siege_fleet(enemy, fleet_index, fleet_pos.x, fleet_pos.y, fleet_pos.z)
    if a > 1 and difficulty > 2:
        fleet_pos = Vec3.rand_in_sphere(39990, 40000, False, True)
        create_siege_fleet("Skaraan", fleet_index, fleet_pos.x, fleet_pos.y, fleet_pos.z)


#------------------------------------------------------------------------------------------------------------
#
## make a few random clusters of nebula
#
t_min = terrain_value * 6
t_max = t_min * 2
spawn_points = scatter.box(random.randint(t_min,t_max), 0,0,0, 100000, 1000, 100000, centered=True)
for v in spawn_points:
    cluster_spawn_points = scatter_sphere(random.randint(terrain_value*2,terrain_value*4), v.x, 0,v.z, 1000, 10000, ring=False)
    for v2 in cluster_spawn_points:
        v2.y = v2.y % 500.0
        nebula = terrain_spawn(v2.x, v2.y, v2.z,None, "#, nebula", "nebula", "behav_nebula")
        nebula.blob.set("local_scale_x_coeff", random.uniform(1.0, 5.5))
        nebula.blob.set("local_scale_y_coeff", random.uniform(1.0, 5.5))
        nebula.blob.set("local_scale_z_coeff", random.uniform(1.0, 5.5))


#------------------------------------------------------------------------------------------------------------
terrain_asteroid_clusters(terrain_value)        

#------------------------------------------------------------------------------------------------------------
# I want candy

#Uncomment to see upgrade debug logs
#logger("upgrades")
log(f"Number of Upgrades: {num_upgrade}", "upgrades")

spawn_points = scatter.box(num_upgrade, 0,0,0, 75000, 1000, 75000, centered=True)
for v in spawn_points:
    upg = random.randint(1,9)
    if upg == 1:
        pickup_spawn(v.x, v.y, v.z, "carapaction_coil")
        log(f"Carapaction Coil spawned {v.x},{v.y},{v.z}", "upgrades")

    if upg == 2:
        pickup_spawn(v.x, v.y, v.z,  "infusion_pcoils")
        log(f"Infusion P-Coil spawned {v.x},{v.y},{v.z}", "upgrades")

    if upg == 3:
        pickup_spawn(v.x, v.y, v.z, "tauron_focuser")
        log(f"Tauron Focuser spawned {v.x},{v.y},{v.z}","upgrades")

    if upg == 4:
        pickup_spawn(v.x, v.y, v.z, "secret_codecase")
        log("Secret Codecase spawned {v.x},{v.y},{v.z}","upgrades")

    if upg == 5:
        pickup_spawn(v.x, v.y, v.z, "hidens_powercell")
        log(f"HiDens Powercell spawned {v.x},{v.y},{v.z}","upgrades")

    if upg == 6:
        pickup_spawn(v.x, v.y, v.z, "vigoranium_nodule")
        log(f"Vigoranium Nodule spawned {v.x},{v.y},{v.z}","upgrades")

    if upg == 7:
        pickup_spawn(v.x, v.y, v.z, "cetrocite_crystal")
        log(f"Cetrocite Crystal spawned {v.x},{v.y},{v.z}","upgrades")

    if upg == 8:
        pickup_spawn(v.x, v.y, v.z, "lateral_array")
        log("Lateral Array spawned {v.x},{v.y},{v.z}", "upgrades")

    if upg == 9:
        pickup_spawn(v.x, v.y, v.z, "haplix_overcharger")
        log("Haplix Overcharger spawned {v.x},{v.y},{v.z}","upgrades")


#wr = terrain_spawn(200, 0, 600, "Wreck", "wreck", "wreck", "behav_asteroid")
#temp_yaw = random.uniform(0.001, 0.003)
#temp_pitch = random.uniform(0.002, 0.004)
#wr.engine_object.steer_yaw = temp_yaw
#wr.engine_object.steer_pitch = temp_pitch
#wr.blob.set("radar_color_override", "#f0c")



spawn_points = scatter.box(monster_value, 0,0,0, 75000, 1000, 75000, centered=True)
for v in spawn_points:
    typhon_classic_spawn(*v.xyz)
#
# Naive Black hole placement
#
spawn_points = scatter.box(lethal_value, 0,0,0, 75000, 500, 75000, centered=True)
for v in spawn_points:
    terrain_spawn_black_hole(*v.xyz)

task_schedule(task_end_game)

#------------------------------------------------------------------------------------------------------------

