@map/single_front "Single Front"
"Bases will be lined up along the right edge of the sector,
" and the enemies will enter from the left. This layout makes
" a much longer game, with long travel distances. The bases are far from enemies, but more isolated.

terrain_value = 0
if "few" == terrain_select:
    terrain_value = 1

if "some" == terrain_select:
    terrain_value = 2

if "lots" == terrain_select:
    terrain_value = 3

if "many" == terrain_select:
    terrain_value = 4


lethal_value = 0
if "few" == lethal_select:
    lethal_value = 1

if "some" == lethal_select:
    lethal_value = 2

if "lots" == lethal_select:
    lethal_value = 3

if "many" == lethal_select:
    lethal_value = 4


friendly_value = 0
if "few" == friendly_select:
    friendly_value = 1

if "some" == friendly_select:
    friendly_value = 2

if "lots" == friendly_select:
    friendly_value = 3

if "many" == friendly_select:
    friendly_value = 4


monster_value = 0
if "few" == monster_select:
    monster_value = 1

if "some" == monster_select:
    monster_value = 2

if "lots" == monster_select:
    monster_value = 3

if "many" == monster_select:
    monster_value = 4


upgrade_value = 0
num_upgrade = 0
if "few" == upgrade_select:
    upgrade_value = 1
    num_upgrade = random.randint(1,3)

if "some" == upgrade_select:
    upgrade_value = 2
    num_upgrade = random.randint(3,5)

if "lots" == upgrade_select:
    upgrade_value = 3
    num_upgrade = random.randint(5,10)

if "many" == upgrade_select:
    upgrade_value = 4
    num_upgrade = random.randint(10,15)




if seed_value != 0:
    random.seed(seed_value)
    print(f"Seed Value: {seed_value}")
else:
    seed_value = random.randint(1,99999)
    random.seed(seed_value)
    print(f"Random Seed Value: {seed_value}")


#------------------------------------------------------------------------------------------------------------


 _station_weights  = {"starbase_command": 3,"starbase_civil": 1,"starbase_industry": 5,"starbase_science": 1}


spawn_points = scatter.box(10000, 0,0,0, 65000, 1000, 65000, centered=True)
num = 1
total_weight = (12-difficulty) *2
_spawned_pos = []

for station in spawn_points:
    #
    # Pick a type of station
    #
    break if total_weight <= 0

    station_type = random.choice(list(_station_weights.keys()))
    station_weight = _station_weights[station_type]
    #
    #
    continue if total_weight < station_weight

    # Force big stations first
    continue if total_weight > 8 and station_weight==1

    total_weight -= station_weight

    name = "DS {num}"
    #
    # Space stations
    #
    _pos = station
    dist = 15000 * 15000
    move = True
    for x while move:
        move = False
        for _prev in _spawned_pos:
            distv = _pos - _prev
            _dist_test = distv.dot(distv)
            if _dist_test < dist:
                move = True
                #print("Move Station")
                _pos = next(spawn_points)
                break
    _spawned_pos.append(_pos)

    station_object = npc_spawn(*_pos, name, "tsn, station", station_type, "behav_station")
    #
    #
    
    
    ds = to_id(station_object)
    #
    #
    #
    apos = station_object.engine_object.pos
    #
    # Make sure not too close
    #

    set_face(ds, random_terran(civilian=True))

    #wrap a minefield around the station
    if lethal_value > 0:
        startAngle = random.randrange(0,359)
        angle = random.randrange(90,170)
        endAngle = startAngle + angle

        depth = 1#random.randrange(2,3)
#        width = random.randrange(int(angle/6), int(angle/3))
        width = int(5 * lethal_value)
        widthArray = [int(angle / 5.0)]
        inner = random.randrange(1200,1500)
        cluster_spawn_points = scatter_ring(width, depth, apos.x,apos.y,apos.z, inner, inner, startAngle, endAngle)
#        cluster_spawn_points = scatter_ring_density(widthArray, apos.x,apos.y,apos.z, inner, 0, startAngle, endAngle)
        # Random type, but same for cluster
        # a_type = f"danger_{1}{ship_data'a'}"
        for v2 in cluster_spawn_points:
            #keep value between -500 and 500??
    #                v2.y = abs(v2.y) % 500 * (v2.y/abs(v2.y))
            mine_obj = terrain_spawn( v2.x, v2.y + random.randrange(-300,300), v2.z,None, None, "danger_1a", "behav_mine")
            mine_obj.blob.set("damage_done", 5)
            mine_obj.blob.set("blast_radius", 1000)

    num += 1

await task_schedule(spawn_friendly_npc)

#------------------------------------------------------------------------------------------------------------
# generate fleets

# For Single Front and Double Front, one enemy is randomly chosen as the attacker, so all fleets will be chosen from that enemy.
enemyTypeNameList = ["Kralien", "Torgoth", "Arvonian", "Ximni"]
enemy = random.choice(enemyTypeNameList)
# enemy = enemy_temp[0]

# Pick a random direction for the attacker, 1 = North, 2 = East, 3 = South, 4 = West
rand_direction = random.randint(1,4)
 
fleet_count = 3 + int(difficulty/2)
fleet_index = int(difficulty - 1)

# Ximni fleets are typically only one ship, so double fleets to balance this out until we code some better Ximni AI.
if enemy == "Ximni":
    fleet_count = fleet_count*2 

for a in range(fleet_count):
#    fleet_pos = Vec3.rand_in_sphere(39990, 40000, False, True)
    if rand_direction == 1:
        fleet_pos = next(scatter_box(1, -40000, -1000, 40000, 40000, 1000, 50000))
    if rand_direction == 2:
        fleet_pos = next(scatter_box(1, 40000, -1000, 40000, 50000, 1000, -40000))
    if rand_direction == 3:
        fleet_pos = next(scatter_box(1, 40000, -1000, -40000, -40000, 1000, -50000))
    if rand_direction == 4:
        fleet_pos = next(scatter_box(1, -40000, -1000, 40000, -50000, 1000, -40000))

    print(f"Fleet Position: {fleet_pos.x} {fleet_pos.y} {fleet_pos.z}")

#    create_npc_fleet_and_ships(enemy, fleet_quality, fleet_quality/3, fleet_pos.x, fleet_pos.y, fleet_pos.z)
    create_siege_fleet(enemy, fleet_index, fleet_pos.x, fleet_pos.y, fleet_pos.z)

# At this time, keep the Skaraans out of a Single Front mission
#    if a > 1 and difficulty > 2:
#        fleet_pos = Vec3.rand_in_sphere(39990, 40000, False, True)
#        create_npc_fleet_and_ships("skaraan", 1,0, fleet_pos.x, fleet_pos.y, fleet_pos.z)
#        create_siege_fleet("Skaraan", fleet_index, fleet_pos.x, fleet_pos.y, fleet_pos.z)


#------------------------------------------------------------------------------------------------------------
#
## make a few random clusters of nebula
#
t_min = terrain_value * 6
t_max = t_min * 2
spawn_points = scatter.box(random.randint(t_min,t_max), 0,0,0, 100000, 1000, 100000, centered=True)
for v in spawn_points:
    cluster_spawn_points = scatter_sphere(random.randint(terrain_value*2,terrain_value*4), v.x, 0,v.z, 1000, 10000, ring=False)
    for v2 in cluster_spawn_points:
        v2.y = v2.y % 500.0
        nebula = terrain_spawn(v2.x, v2.y, v2.z,None, "#, nebula", "nebula", "behav_nebula")
        nebula.blob.set("local_scale_x_coeff", random.uniform(1.0, 5.5))
        nebula.blob.set("local_scale_y_coeff", random.uniform(1.0, 5.5))
        nebula.blob.set("local_scale_z_coeff", random.uniform(1.0, 5.5))


#------------------------------------------------------------------------------------------------------------
# make a few random clusters of Asteroids

t_min = terrain_value * 7
t_max = t_min * 3
spawn_points = scatter.box(random.randint(t_min,t_max), 0,0,0, 100000, 1000, 100000, centered=True)

asteroid_types = ship_data_plain_asteroid_keys()
for v in spawn_points:
    
    amount = random.randint(t_min+10,t_max+10)
    # the more you have give a bit more space
    ax = random.randint(-20,20)
    ay = random.randint(-150,150)
    az = random.randint(-20,20)
    #cluster_spawn_points = scatter_box(amount, v.x, 0,v.z, amount*50, amount*20,amount*200, centered=True, ax, ay, az )
    cluster_spawn_points = scatter_box(amount,  v.x, 0,v.z, amount*50, amount*5,amount*200, True, 0, ay, 0 )

    for v2 in cluster_spawn_points:
        a_type = random.choice(asteroid_types)

        asteroid = terrain_spawn(v2.x, v2.y, v2.z,None, "#,asteroid", a_type, "behav_asteroid")
        asteroid.engine_object.steer_yaw = random.uniform(0.0001, 0.003)
        asteroid.engine_object.steer_pitch = -random.uniform(0.0001, 0.003)
        asteroid.engine_object.steer_roll = random.uniform(0.0001, 0.003)

        sx = random.uniform(0.8, 3.5)
        sy = random.uniform(0.8, 3.5)
        sz = random.uniform(0.8, 3.5)
        sm = max(sx, sy)
        sm = max(sm, sz)
        #er = asteroid.blob.get("exclusionradius",0)
        #er *= sm

        asteroid.blob.set("local_scale_x_coeff", sx)
        asteroid.blob.set("local_scale_y_coeff", sy)
        asteroid.blob.set("local_scale_z_coeff", sz)
        #asteroid.blob.set("exclusionradius", er)
        

#------------------------------------------------------------------------------------------------------------
# I want candy

#Uncomment to see upgrade debug logs
#logger("upgrades")
log(f"Number of Upgrades: {num_upgrade}", "upgrades")

spawn_points = scatter.box(num_upgrade, 0,0,0, 75000, 1000, 75000, centered=True)
for v in spawn_points:
    upg = random.randint(1,9)
    if upg == 1:
        pickup_spawn(v.x, v.y, v.z, "carapaction_coil")
        log(f"Carapaction Coil spawned {v.x},{v.y},{v.z}", "upgrades")

    if upg == 2:
        pickup_spawn(v.x, v.y, v.z,  "infusion_pcoils")
        log(f"Infusion P-Coil spawned {v.x},{v.y},{v.z}", "upgrades")

    if upg == 3:
        pickup_spawn(v.x, v.y, v.z, "tauron_focuser")
        log(f"Tauron Focuser spawned {v.x},{v.y},{v.z}","upgrades")

    if upg == 4:
        pickup_spawn(v.x, v.y, v.z, "secret_codecase")
        log("Secret Codecase spawned {v.x},{v.y},{v.z}","upgrades")

    if upg == 5:
        pickup_spawn(v.x, v.y, v.z, "hidens_powercell")
        log(f"HiDens Powercell spawned {v.x},{v.y},{v.z}","upgrades")

    if upg == 6:
        pickup_spawn(v.x, v.y, v.z, "vigoranium_nodule")
        log(f"Vigoranium Nodule spawned {v.x},{v.y},{v.z}","upgrades")

    if upg == 7:
        pickup_spawn(v.x, v.y, v.z, "cetrocite_crystal")
        log(f"Cetrocite Crystal spawned {v.x},{v.y},{v.z}","upgrades")

    if upg == 8:
        pickup_spawn(v.x, v.y, v.z, "lateral_array")
        log("Lateral Array spawned {v.x},{v.y},{v.z}", "upgrades")

    if upg == 9:
        pickup_spawn(v.x, v.y, v.z, "haplix_overcharger")
        log("Haplix Overcharger spawned {v.x},{v.y},{v.z}","upgrades")


#wr = terrain_spawn(200, 0, 600, "Wreck", "wreck", "wreck", "behav_asteroid")
#temp_yaw = random.uniform(0.001, 0.003)
#temp_pitch = random.uniform(0.002, 0.004)
#wr.engine_object.steer_yaw = temp_yaw
#wr.engine_object.steer_pitch = temp_pitch
#wr.blob.set("radar_color_override", "#f0c")



spawn_points = scatter.box(monster_value, 0,0,0, 75000, 1000, 75000, centered=True)
for v in spawn_points:
    typhon_classic_spawn(*v.xyz)

task_schedule(task_end_game)

#------------------------------------------------------------------------------------------------------------

