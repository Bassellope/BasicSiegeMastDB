## 
# Example shows reusable common client select
import common_console_select.mast
import common_docking.mast
import science.mast
import comms.mast
import internal_damage.mast
import basic_ai.mast
import grid_ai.mast

#logger

enemy_count=5
start_text = "Mission: Basic Siege written in Mast"

route change console select_console
route destroy update_score

if IS_SERVER:

->start_server 
else: 
# client_main is in console_select

-> client_main
end_if


====== update_score  ========
obj = to_object(DESTROYED_ID)
if obj is not None:
    side = "{obj.side.lower()}_destroyed"
    count = game_stats.get(side, 0)
    do game_stats[side] = count + 1

    race = obj.art_id
    under = race.find("_")
    if under>=0:
        race = race[0:under]
        race = "{race.lower()}_ships_destroyed"
        count = game_stats.get(race, 0)
        do game_stats[race] = count + 1
    end_if        
end_if


->END

========== results_server ===============

simulation pause

section style="area: 10, 10, 99, 90;"

"""color:white;justify: center; font: gui-6;text:Game results"""
row
"""""color:cyan;justify:center;font:gui-5;text:{start_text}"""""
row
hole
hole
hole
hole
"""color:yellow; text:TSN Destroyed"""
"""color:yellow;justify: right; text:{game_stats["tsn_destroyed"]}"""
row
hole
hole
hole
hole
"""color:yellow; text:Raider Destroyed"""
"""color:yellow;justify: right; text:{game_stats["raider_destroyed"]}"""
row
hole
hole
hole
hole
"""color:yellow; text:arvonian ships destroyed"""
"""color:yellow;justify: right; text:{game_stats["arvonian_ships_destroyed"]}"""
row
hole
hole
hole
hole
"""color:yellow; text:kralien ships destroyed"""
"""color:yellow;justify: right; text:{game_stats["kralien_ships_destroyed"]}"""
row
hole
hole
hole
hole
"""color:yellow; text:skaraan ships destroyed"""
"""color:yellow;justify: right; text:{game_stats["skaraan_ships_destroyed"]}"""
row
hole
hole
hole
hole
"""color:yellow; text:torgoth ships destroyed"""
"""color:yellow;justify: right; text:{game_stats["torgoth_ships_destroyed"]}"""
row

end_time = int((sim.time_tick_counter - game_stats["start_time"]) / 30  /60)
hole
hole
hole
hole
"""color:yellow; right; text:Game Time"""
"""color:yellow;justify: right; text:{end_time} minutes"""


await choice:
+ "Play again":
end_await
# fall thought to start server



========== start_server ===============

start_text = "Mission: Basic Siege written in Mast"

shared game_stats = ~~{
    "tsn_destroyed": 0,
    "raider_destroyed": 0,
    "kralien_ships_destroyed": 0,
    "skaraan_ships_destroyed": 0,
    "arvonian_ships_destroyed": 0,
    "torgoth_ships_destroyed": 0,
    "start_time": sim.time_tick_counter
}~~



section style="area: 50, 10, 99, 90;"
"""""{start_text}"""""

section style="area: 60, 75, 99, 89;"

intslider enemy_count "low: 1.0;high:50.0"

row
""" Enemies: {int(enemy_count)} """


await choice:
+ "Start Mission":
    simulation create
    simulation resume
    -> start
end_await
-> start_server


===== start ======
# Build the world

->> build_world
# Start task to watch state
=> task_end_game
# This tasks ends
->END


============ task_end_game ======= 
players = role('PlayerShip')
if len(players)==0:
    start_text = "Mission is lost!  All yer base are belong to us, dammit."
    ->  results_server
end_if

raiders = role('Raider')
if len(raiders)==0:
    start_text = "Mission is won!  All the enemies have been destroyed."
    ->  results_server
end_if

delay sim 4s
-> task_end_game



================= build_world ===================

player_ships =  ~~[ (500,0,0, "Artemis", "tsn", "tsn_battle_cruiser"),
                (200,0,0, "Hera", "tsn", "tsn_missile_cruiser"),
                ( 900,0,0, "Atlas", "tsn", "tsn_missile_cruiser")
]~~

first = True
colors  = ["yellow", "green", "blue"]
for player_args in player_ships:
    player_ship = to_id(player_spawn(*player_args))
    do set_face(player_ship, random_terran())
    if first:
        do assign_client_to_ship(0,player_ship)
        first = False
    end_if
    points = get_open_grid_points(sim,player_ship)
    
    for i in range(3):
        if len(points)>0:
            point = random.choice(points)
            do points.remove(point)
            do grid_spawn(player_ship, f"DC{i+1}", f"DC{i+1}", point[0],point[1], 80, colors[i], "damcons")
        end_if
    next i
next player_args

stations = [(0,0,0, "Alpha"),(2400,0,100, "Beta")]
for station in stations:
    ds = to_id(npc_spawn(*station, "tsn", "starbase_command", "behav_station"))
    do add_role(ds, "Station")
    do set_face(ds, random_terran(civilian=True))
next station 


enemyTypeNameList = ["kralien_dreadnaught","kralien_battleship","skaraan_defiler","arvonian_carrier","torgoth_behemoth"]
enemy_prefix = "KLMNQ"


enemy = 0
spawn_points = scatter_sphere(int(enemy_count), 0,0,0, 6000, 6000+250*enemy_count, ring=True)

for v in spawn_points:
    r_type = random.choice(enemyTypeNameList)
    r_name = f"{random.choice(enemy_prefix)}_{enemy}"
    spawn_data = npc_spawn(v.x, v.y, v.z, r_name, "RAIDER", r_type, "behav_npcship")
    raider = spawn_data.py_object
    do set_face(raider.id, random_kralien())
    do add_role(raider.id, "Raider")
    enemy = enemy + 1
next v


## make a few random clusters of nebula
spawn_points = scatter_sphere(random.randint(2,7), 0,0,0, 5000, 20000, ring=True)
for v in spawn_points:
    cluster_spawn_points = scatter_sphere(random.randint(3,6), v.x, 0,v.z, 100, 2000, ring=True)
    for v2 in cluster_spawn_points:
        do terrain_spawn(v2.x, v2.y, v2.z,None, None, "nebula", "behav_nebula")
    next v2
next v



# make a few random clusters of Asteroids
spawn_points = scatter_sphere(random.randint(4,7), 0,0,0, 2000, 9000, ring=True)
asteroid_types = names_plain_asteroid_keys()
for v in spawn_points:
    cluster_spawn_points = scatter_line(random.randint(10,25),  v.x, 0,v.z-800,   v.x, 0,v.z+800,   random=True)
#    scatter_sphere(random.randint(8,15), v.x, 0,v.z, 100, 1000, ring=False)
    for v2 in cluster_spawn_points:
        #keep value between -500 and 500??
        #v2.y = abs(v2.y) % 500 * (v2.y/abs(v2.y))
        a_type = random.choice(asteroid_types)
        #a_type = "asteroid_crystal_blue"
        do terrain_spawn(v2.x, v2.y, v2.z,None, None, a_type, "behav_asteroid")
    next v2
next v

# I want candy
spawn_points = scatter_sphere(random.randint(5,12), 0,0,0, 1000, 4000, ring=True)
for v in spawn_points:
    startAngle = random.randrange(0,359)
    angle = random.randrange(15,65)
    endAngle = startAngle + angle

    depth = random.randrange(2,5)
    width = random.randrange(int(angle/6), int(angle/3))
    inner = random.randrange(2000,9000)
    cluster_spawn_points = scatter_ring(width, depth, 0, 0,0, inner + 500, inner, startAngle, endAngle)
    # Random type, but same for cluster
    a_type = f"danger_{1}{'a'}"
    for v2 in cluster_spawn_points:
        #keep value between -500 and 500??
#                v2.y = abs(v2.y) % 500 * (v2.y/abs(v2.y))
        do terrain_spawn( v2.x, v2.y, v2.z,None, None, a_type, "behav_mine")
        do terrain_spawn( v2.x, v2.y + 1000, v2.z,None, None, a_type, "behav_mine")
        do terrain_spawn( v2.x, v2.y - 1000, v2.z,None, None, a_type, "behav_mine")
    next v2
next v
<<-

