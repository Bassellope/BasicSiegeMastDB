## 
# Example shows reusable common client select
import common_console_select.mast
import common_docking.mast

logger

enemy_count=5
start_text = "Mission: Basic Siege written in Mast"

if IS_SERVER:
->start_server 
else: 
# client_main is in console_select
-> client_main
end_if

========== start_server ===============

section style="area: 50, 10, 99, 90;"
"""""{start_text}"""""

section style="area: 60, 75, 99, 89;"

intslider enemy_count 1.0 50.0 5.0 

row
""" Enemies: {int(enemy_count)} """


await choice:
+ "Start Mission":
    simulation create
    simulation resume
    -> start
end_await
-> start_server


===== start ======
# Build the world
->> build_world

log "comms"


# Start task to watch state
=> task_end_game
=> task_npc_targeting
=> task_comms
=> task_player_docking
#### Handled different handled in station comms
# => task_station_building

# This tasks ends
->END


========== task_player_docking ===============
for player in to_object_list(role("__PLAYER__")):
    do to_object(player).start_task("player_docking")
next player
->END

============ task_end_game ======= 
players = role('PlayerShip')
if len(players)==0:
    start_text = "Mission is lost!  All yer base are belong to us, dammit."
    -> start_server
end_if

raiders = role('Raider')
if len(raiders)==0:
    start_text = "Mission is won!  All the enemies have been destroyed."
    -> start_server
end_if

delay sim 4s
-> task_end_game

#############################################
# Create task to player to raider comms and station comms
#############################################

=========== task_comms  ========
# start the comms for the players and stations
# Each ship will have its of thread for comms
# this enables them to have a unique path
for player in to_object_list(role('PlayerShip')):
    for ds in to_object_list(role('Station')):
        => station_comms {"self": ds, "player": player, "torpedo_build_type": "nothing"}
    next ds
    for raider in to_object_list(role("Raider")):
        => npc_comms {"self": raider, "player": player}
    next raider
next player
->END

=============== station_comms ===============
comms_id = player.comms_id


await self comms player:
    + "Hail":
        homing = self.get_engine_data(sim, "torpedo_count", sbs.TORPEDO.HOMING)
        nuke = self.get_engine_data(sim, "torpedo_count", sbs.TORPEDO.NUKE)
        emp = self.get_engine_data(sim, "torpedo_count", sbs.TORPEDO.EMP)
        mine = self.get_engine_data(sim, "torpedo_count", sbs.TORPEDO.MINE)
        have self tell player """
Hello, {comms_id}.  We stand ready to assist.
You have full docking privileges.
{homing} Homing ready
{nuke} Nuke ready
{emp} EMP ready
{mine} Mine ready
{torpedo_build_type} in production.
"""
    + "Now Docking":
        have self tell player  """We read you, {comms_id}.  We're standing by for expedited docking.^"""

    + "Hello, world":
        have self tell player  """Hello, World"""

    + "Build Homing": 
        have self tell player  """We read you, {comms_id}.  We will focus on homing production.^"""
        torpedo_build_type = sbs.TORPEDO.HOMING
        cancel build_task
        build_task => task_station_building

    + "Build Nuke":
        have self tell player  """We read you, {comms_id}.  We will focus on nuke production.^"""
        torpedo_build_type= sbs.TORPEDO.NUKE
        cancel build_task
        build_task => task_station_building

    + "Build Emp":
        have self tell player  """We read you, {comms_id}.  We will focus on EMP production.^"""
        torpedo_build_type= sbs.TORPEDO.EMP
        cancel build_task
        build_task => task_station_building
    + "Build Mine":
        have self tell player  """We read you, {comms_id}.  We will focus on MINE production.^"""
        torpedo_build_type = sbs.TORPEDO.MINE
        cancel build_task
        build_task => task_station_building
end_await

-> station_comms

=== task_station_building ===
delay sim 10s
~~
cur_count = self.get_engine_data(sim, "torpedo_count", torpedo_build_type)
self.set_engine_data(sim, "torpedo_count", cur_count+1, torpedo_build_type)
~~
have self tell player  """{comms_id}. {torpedo_build_type} Production complete."""
->task_station_building


================ npc_comms ==================
comms_id = player.comms_id #(sim)
await self comms player:
    + "Hail":
        have self tell player "{comms_id}! We will destroy you, disgusting Terran scum!"
    + "You're Ugly":
        have self tell player  """You are a foolish Terran, {comms_id}.  We know that the taunt functionality is not currently implemented.^"""
    + "Surrender now":
        have self tell player """OK we give up, {comms_id}."""
end_await
-> npc_comms

========== task_npc_targeting === 
for raider in role('Raider'):
    the_target = closest(raider, role("PlayerShip"), 2000)
    if the_target is None:
        the_target = closest(raider, role("Station"))
    end_if
    if the_target is not None:
        do target(sim, raider, the_target, True)
    end_if
next raider


delay sim 5s
-> task_npc_targeting

================= build_world ===================

player_ships =  ~~[ (500,0,0, "Artemis", "tsn", "tsn_battle_cruiser"),
                (200,0,0, "Hera", "tsn", "tsn_missile_cruiser"),
                ( 900,0,0, "Atlas", "tsn", "tsn_missile_cruiser")
]~~

first = True
for player_args in player_ships:
    player_ship = to_id(player_spawn(*player_args))
    do set_face(player_ship, random_terran())
    if first:
        do assign_client_to_ship(0,player_ship)
        first = False
    end_if
next player_args

stations = [(0,0,0, "Alpha"),(2400,0,100, "Beta")]
for station in stations:
    ds = to_id(npc_spawn(*station, "tsn", "starbase_command", "behav_station"))
    do add_role(ds, "Station")
    do set_face(ds, random_terran(civilian=True))
next station 


enemyTypeNameList = ["kralien_dreadnaught","kralien_battleship","skaraan_defiler","cargo_ship","arvonian_carrier","torgoth_behemoth"]
enemy_prefix = "KLMNQ"


enemy = 0
spawn_points = scatter_sphere(int(enemy_count), 0,0,0, 6000, 6000+250*enemy_count, ring=True)

for v in spawn_points:
    r_type = random.choice(enemyTypeNameList)
    r_name = f"{random.choice(enemy_prefix)}_{enemy}"
    spawn_data = npc_spawn(v.x, v.y, v.z, r_name, "RAIDER", r_type, "behav_npcship")
    raider = spawn_data.py_object
    do set_face(raider.id, random_kralien())
    do add_role(raider.id, "Raider")
    enemy = enemy + 1
next v


# make a few random clusters of nebula
spawn_points = scatter_sphere(random.randint(2,7), 0,0,0, 1000, 4000, ring=True)
for v in spawn_points:
    cluster_spawn_points = scatter_sphere(random.randint(10,20), v.x, 0,v.z, 100, 1000, ring=True)
    for v2 in cluster_spawn_points:
        do terrain_spawn(v2.x, v2.y, v2.z,None, None, "nebula", "behav_nebula")
    next v2
next v

# make a few random clusters of Asteroids
spawn_points = scatter_sphere(random.randint(10,20), 0,0,0, 1000, 4000, ring=True)
asteroid_types = names_asteroid_keys()
for v in spawn_points:
    cluster_spawn_points = scatter_sphere(random.randint(10,20), v.x, 0,v.z, 100, 1000, ring=False)
    for v2 in cluster_spawn_points:
        #keep value between -500 and 500??
        v2.y = abs(v2.y) % 500 * (v2.y/abs(v2.y))
        a_type = random.choice(asteroid_types)
        #a_type = "asteroid_crystal_blue"
        do terrain_spawn(v2.x, v2.y, v2.z,None, None, a_type, "behav_asteroid")
    next v2
next v

# I want candy
spawn_points = scatter_sphere(random.randint(5,12), 0,0,0, 1000, 4000, ring=True)
for v in spawn_points:
    cluster_spawn_points = scatter.sphere(random.randrange(10,20), v.x, 0,v.z, 100, 1000, ring=False)
    # Random type, but same for cluster
    a_type = f"danger_{random.randint(1,5)}{random.choice('abc')}"
    for v2 in cluster_spawn_points:
        #keep value between -500 and 500??
        v2.y = abs(v2.y) % 500 * (v2.y/abs(v2.y))
        do terrain_spawn(v2.x, v2.y, v2.z,None, None, a_type, "behav_mine")
    next v2
next v
<<-
