import map_common.mast

================= siege_build_world ===================


first = True
colors  = ["yellow", "green", "blue"]
c = 0
#do print(f"{player_count}")
for player_ship_data in player_list:
    if c>= player_count:
        # make sure the id is cleared dry docked ships
        player_ship_data.id = None
        continue
    end_if

    player_ship = to_id(player_spawn(*player_ship_data.spawn_point, player_ship_data.name, player_ship_data.side, player_ship_data.ship))
    c+=1
    player_ship_data.id = player_ship

    do set_face(player_ship, player_ship_data.face)
    if first:
        do assign_client_to_ship(0,player_ship)
        first = False
    end_if
    points = get_open_grid_points(sim,player_ship)
    
    for i in range(3):
        if len(points)>0:
            point = random.choice(points)
            do points.remove(point)
            do grid_spawn(player_ship, f"DC{i+1}", f"DC{i+1}", point[0],point[1], 80, colors[i], "damcons")
        end_if
    next i
next player_args

stations = [(0,0,0, "Alpha"),(2400,0,100, "Beta")]
for station in stations:
    ds = to_id(npc_spawn(*station, "tsn", "starbase_command", "behav_station"))
    do add_role(ds, "Station")
    do set_face(ds, random_terran(civilian=True))
next station 


enemyTypeNameList = []
do enemyTypeNameList.extend(names_torgoth_ship_keys())
do enemyTypeNameList.extend(names_kralien_ship_keys())
do enemyTypeNameList.extend(names_skaraan_ship_keys())
do enemyTypeNameList.extend(names_arvonian_ship_keys())
do enemyTypeNameList.extend(names_ximni_ship_keys())

enemy_prefix = "KLMNQ"


enemy = 0
spawn_points = scatter_sphere(int(enemy_count), 0,0,0, 6000, 6000+250*enemy_count, ring=True)

for v in spawn_points:
    r_type = random.choice(enemyTypeNameList)
    race = r_type.split("_")
    race = race[0]
    roles = "{race}, raider"
    r_name = f"{random.choice(enemy_prefix)}_{enemy}"
    spawn_data = npc_spawn(v.x, v.y, v.z, r_name, roles, r_type, "behav_npcship")
    raider = spawn_data.py_object
    # add a taunt trait
    do set_inventory_value(raider.id, "taunt_trait", random.randint(0,2))
    #
    # Should add a commnon funtion to call to get the face based on race
    #
    do set_face(raider.id, random_face(race))
    
    
    
    enemy = enemy + 1
next v


## make a few random clusters of nebula
spawn_points = scatter_sphere(random.randint(2,7), 0,0,0, 5000, 20000, ring=True)
for v in spawn_points:
    cluster_spawn_points = scatter_sphere(random.randint(3,6), v.x, 0,v.z, 100, 2000, ring=True)
    for v2 in cluster_spawn_points:
        do terrain_spawn(v2.x, v2.y, v2.z,None, None, "nebula", "behav_nebula")
    next v2
next v



# make a few random clusters of Asteroids
spawn_points = scatter_sphere(random.randint(4,7), 0,0,0, 2000, 9000, ring=True)
asteroid_types = names_plain_asteroid_keys()
for v in spawn_points:
    cluster_spawn_points = scatter_line(random.randint(10,25),  v.x, 0,v.z-800,   v.x, 0,v.z+800,   random=True)
#    scatter_sphere(random.randint(8,15), v.x, 0,v.z, 100, 1000, ring=False)
    for v2 in cluster_spawn_points:
        #keep value between -500 and 500??
        #v2.y = abs(v2.y) % 500 * (v2.y/abs(v2.y))
        a_type = random.choice(asteroid_types)
        #a_type = "asteroid_crystal_blue"
        do terrain_spawn(v2.x, v2.y, v2.z,None, None, a_type, "behav_asteroid")
    next v2
next v

# I want candy
spawn_points = scatter_sphere(random.randint(5,12), 0,0,0, 1000, 4000, ring=True)
for v in spawn_points:
    startAngle = random.randrange(0,359)
    angle = random.randrange(15,65)
    endAngle = startAngle + angle

    depth = random.randrange(2,5)
    width = random.randrange(int(angle/6), int(angle/3))
    inner = random.randrange(2000,9000)
    cluster_spawn_points = scatter_ring(width, depth, 0, 0,0, inner + 500, inner, startAngle, endAngle)
    # Random type, but same for cluster
    a_type = f"danger_{1}{'a'}"
    for v2 in cluster_spawn_points:
        #keep value between -500 and 500??
#                v2.y = abs(v2.y) % 500 * (v2.y/abs(v2.y))
        do terrain_spawn( v2.x, v2.y, v2.z,None, None, a_type, "behav_mine")
        do terrain_spawn( v2.x, v2.y + 1000, v2.z,None, None, a_type, "behav_mine")
        do terrain_spawn( v2.x, v2.y - 1000, v2.z,None, None, a_type, "behav_mine")
    next v2
next v

jump spawn_friendly_npc

