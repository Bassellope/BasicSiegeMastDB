import map_common.mast

================= siege_build_world ===================
schedule spawn_players

terrain_value = 0
if "few" == terrain_select:
    terrain_value = 1
    end_if
if "some" == terrain_select:
    terrain_value = 2
    end_if
if "lots" == terrain_select:
    terrain_value = 3
    end_if
if "many" == terrain_select:
    terrain_value = 4
    end_if

lethal_value = 0
if "few" == lethal_select:
    lethal_value = 1
    end_if
if "some" == lethal_select:
    lethal_value = 2
    end_if
if "lots" == lethal_select:
    lethal_value = 3
    end_if
if "many" == lethal_select:
    lethal_value = 4
    end_if

friendly_value = 0
if "few" == friendly_select:
    friendly_value = 1
    end_if
if "some" == friendly_select:
    friendly_value = 2
    end_if
if "lots" == friendly_select:
    friendly_value = 3
    end_if
if "many" == friendly_select:
    friendly_value = 4
    end_if

monster_value = 0
if "few" == monster_select:
    monster_value = 1
    end_if
if "some" == monster_select:
    monster_value = 2
    end_if
if "lots" == monster_select:
    monster_value = 3
    end_if
if "many" == monster_select:
    monster_value = 4
    end_if

anomaly_value = 0
num_anomaly = 0
if "few" == anomaly_select:
    anomaly_value = 1
    num_anomaly = random.randint(1,3)
    end_if
if "some" == anomaly_select:
    anomaly_value = 2
    num_anomaly = random.randint(3,5)
        end_if
if "lots" == anomaly_select:
    anomaly_value = 3
    num_anomaly = random.randint(5,10)
    end_if
if "many" == anomaly_select:
    anomaly_value = 4
    num_anomaly = random.randint(10,15)
    end_if



if seed_value != 0:
    do random.seed(seed_value)
    do print(f"Seed Value: {seed_value}")
else:
    seed_value = random.randint(1,99999)
    do random.seed(seed_value)
    do print(f"Random Seed Value: {seed_value}")
    end_if

#------------------------------------------------------------------------------------------------------------


 _station_weights  = {"starbase_command": 3,"starbase_civil": 1,"starbase_industry": 5,"starbase_science": 1}


spawn_points = scatter.box(10000, 0,0,0, 65000, 1000, 65000, centered=True)
num = 1
total_weight = (12-enemy_count) *2
_spawned_pos = []

for station in spawn_points:
    #
    # Pick a type of station
    #
    break if total_weight <= 0

    station_type = random.choice(list(_station_weights.keys()))
    station_weight = _station_weights[station_type]
    #
    #
    continue if total_weight < station_weight

    # Force big stations first
    continue if total_weight > 8 and station_weight==1

    total_weight -= station_weight

    name = "DS {num}"
    #
    # Space stations
    #
    _pos = station
    dist = 15000 * 15000
    move = True
    for x while move:
        move = False
        for _prev in _spawned_pos:
            distv = _pos - _prev
            _dist_test = distv.dot(distv)
            if _dist_test < dist:
                move = True
                do print("Move Station")
                _pos = next(spawn_points)
                break
            end_if
        next _prev
    next x
    do _spawned_pos.append(_pos)

    station_object = npc_spawn(*_pos, name, "tsn, station", station_type, "behav_station")
    #
    #
    
    
    ds = to_id(station_object)
    #
    #
    #
    apos = station_object.engine_object.pos
    #
    # Make sure not too close
    #

    do set_face(ds, random_terran(civilian=True))

    #wrap a minefield around the station
    if lethal_value > 0:
        startAngle = random.randrange(0,359)
        angle = random.randrange(90,170)
        endAngle = startAngle + angle

        depth = 1#random.randrange(2,3)
#        width = random.randrange(int(angle/6), int(angle/3))
        width = int(5 * lethal_value)
        widthArray = [int(angle / 5.0)]
        inner = random.randrange(1200,1500)
        cluster_spawn_points = scatter_ring(width, depth, apos.x,apos.y,apos.z, inner, inner, startAngle, endAngle)
#        cluster_spawn_points = scatter_ring_density(widthArray, apos.x,apos.y,apos.z, inner, 0, startAngle, endAngle)
        # Random type, but same for cluster
        # a_type = f"danger_{1}{'a'}"
        for v2 in cluster_spawn_points:
            #keep value between -500 and 500??
    #                v2.y = abs(v2.y) % 500 * (v2.y/abs(v2.y))
            do terrain_spawn( v2.x, v2.y + random.randrange(-300,300), v2.z,None, None, "danger_3a", "behav_mine")
        next v2
    end_if
    num += 1
next station 

#------------------------------------------------------------------------------------------------------------
enemyTypeNameList = []
do enemyTypeNameList.extend(names_torgoth_ship_keys())
do enemyTypeNameList.extend(names_kralien_ship_keys())
do enemyTypeNameList.extend(names_skaraan_ship_keys())
do enemyTypeNameList.extend(names_arvonian_ship_keys())
do enemyTypeNameList.extend(names_ximni_ship_keys())

enemy_prefix = "KLMNQ"


#------------------------------------------------------------------------------------------------------------
box_count = int(enemy_count/2)
#spawn_north = scatter_line(int(enemy_count), 0,0, 9000, 20000,0, 6000, True)
#spawn_south = scatter_line(int(enemy_count), 0,0,-9000, 20000,0,-6000, True)

spawn_north = scatter_box(box_count, 0,0, 35000, 100000, 2000, 15000, centered=True)
spawn_south = scatter_box(box_count, 0,0, -35000, 100000, 2000, 15000, centered=True)
spawn_east = scatter_box(box_count, 35000,0, 0, 15000, 2000, 100000, centered=True)
spawn_west = scatter_box(box_count, -35000,0, 0, 15000, 2000, 100000, centered=True)

spawn_points = []
do spawn_points.extend(spawn_north)
do spawn_points.extend(spawn_south)
do spawn_points.extend(spawn_east)
do spawn_points.extend(spawn_west)
do random.shuffle(spawn_points)


#------------------------------------------------------------------------------------------------------------
call_signs = []
enemy_name_number = 0
do call_signs.extend(range(1,100))
do random.shuffle(call_signs)

for v in spawn_points:
    r_type = random.choice(enemyTypeNameList)
    race = r_type.split("_")
    race = race[0]
    if race=="xim":
        race = "ximni"
    end_if
    roles = "{race}, raider"
    r_name = f"{random.choice(enemy_prefix)} {str(call_signs[enemy_name_number]).zfill(2)}"
    spawn_data = npc_spawn(v.x, v.y, v.z, r_name, roles, r_type, "behav_npcship")
    raider = spawn_data.py_object
    #
    # Should add a commnon funtion to call to get the face based on race
    #
    do set_face(raider.id, random_face(race))
    
    
    
    enemy_name_number = enemy_name_number + 1
    enemy_count %= 100
next v


#------------------------------------------------------------------------------------------------------------
#
## make a few random clusters of nebula
#
t_min = terrain_value * 6
t_max = t_min * 2
spawn_points = scatter.box(random.randint(t_min,t_max), 0,0,0, 100000, 1000, 100000, centered=True)
for v in spawn_points:
    cluster_spawn_points = scatter_sphere(random.randint(terrain_value,terrain_value*2), v.x, 0,v.z, 1000, 10000, ring=False)
    for v2 in cluster_spawn_points:
        v2.y = v2.y % 500.0
        do terrain_spawn(v2.x, v2.y, v2.z,None, None, "nebula", "behav_nebula")
    next v2
next v



#------------------------------------------------------------------------------------------------------------
# make a few random clusters of Asteroids

t_min = terrain_value * 7
t_max = t_min * 3
spawn_points = scatter.box(random.randint(t_min,t_max), 0,0,0, 100000, 1000, 100000, centered=True)

asteroid_types = names_plain_asteroid_keys()
for v in spawn_points:
    
    amount = random.randint(t_min+10,t_max+10)
    # the more you have give a bit more space
    ax = random.randint(-20,20)
    ay = random.randint(-150,150)
    az = random.randint(-20,20)
    #cluster_spawn_points = scatter_box(amount, v.x, 0,v.z, amount*50, amount*20,amount*200, centered=True, ax, ay, az )
    cluster_spawn_points = scatter_box(amount,  v.x, 0,v.z, amount*50, amount*5,amount*200, True, 0, ay, 0 )

    for v2 in cluster_spawn_points:
        a_type = random.choice(asteroid_types)

        asteroid = terrain_spawn(v2.x, v2.y, v2.z,None, None, a_type, "behav_asteroid")
        asteroid.engine_object.steer_yaw = random.uniform(0.0001, 0.003)
		asteroid.engine_object.steer_pitch = -random.uniform(0.0001, 0.003)
		asteroid.engine_object.steer_roll = random.uniform(0.0001, 0.003)
    next v2
next v

#------------------------------------------------------------------------------------------------------------
# I want candy

do print(f"Number of Anomalies: {num_anomaly}")

spawn_points = scatter.box(num_anomaly, 0,0,0, 75000, 1000, 75000, centered=True)
for v in spawn_points:
    anom = random.randint(1,9)
    if anom == 1:
        do pickup_spawn(v.x, v.y, v.z, "carapaction_coil")
        do print(f"Carapaction Coil spawned {v.x},{v.y},{v.z}")
    end_if
    if anom == 2:
        do pickup_spawn(v.x, v.y, v.z,  "infusion_pcoils")
        do print(f"Infusion P-Coil spawned {v.x},{v.y},{v.z}")
    end_if
    if anom == 3:
        do pickup_spawn(v.x, v.y, v.z, "tauron_focuser")
        do print(f"Tauron Focuser spawned {v.x},{v.y},{v.z}")
    end_if
    if anom == 4:
        do pickup_spawn(v.x, v.y, v.z, "secret_codecase")
        do print(f"Secret Codecase spawned {v.x},{v.y},{v.z}")
    end_if
    if anom == 5:
        do pickup_spawn(v.x, v.y, v.z, "hidens_powercell")
        do print(f"HiDens Powercell spawned {v.x},{v.y},{v.z}")
    end_if
    if anom == 6:
        do pickup_spawn(v.x, v.y, v.z, "vigoranium_nodule")
        do print(f"Vigoranium Nodule spawned {v.x},{v.y},{v.z}")
    end_if
    if anom == 7:
        do pickup_spawn(v.x, v.y, v.z, "cetrocite_crystal")
        do print(f"Cetrocite Crystal spawned {v.x},{v.y},{v.z}")
    end_if
    if anom == 8:
        do pickup_spawn(v.x, v.y, v.z, "lateral_array")
        do print(f"Lateral Array spawned {v.x},{v.y},{v.z}")
    end_if
    if anom == 9:
        do pickup_spawn(v.x, v.y, v.z, "haplix_overcharger")
        do print(f"Haplix Overcharger spawned {v.x},{v.y},{v.z}")
    end_if
    #anom+=1    
next v


jump spawn_friendly_npc
#------------------------------------------------------------------------------------------------------------

