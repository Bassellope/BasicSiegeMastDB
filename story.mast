## 
# Example shows reusable common client select
import debug.mast #want debug tabs left of upgrade
import common_console_select.mast
import science.mast
import comms.mast
import internal_damage.mast
import basic_ai.mast
import grid_ai.mast
import siege.mast
import singlefront.mast
import doublefront.mast
import deepstrike.mast
import peacetime.mast
import borderwar.mast
import map_common.mast
import map_common.py
import extra_gui.mast
import game_results.mast
import damage.mast
import destroy.mast
import grid_comms.mast
import pickup_common.mast
import upgrade.mast
import story.py
import hangar.mast
import monster.mast
import npc_cag.py
import operator/main_screen.mast
import operator/remote_console.mast
import operator/admin_console.mast
import commerce/resource_gather.py
import crew_management.mast
import consoles/manual_weapons.mast


#
# Uncomment to enable logging via the log command
#
# logger(file="mast.log") #default to file
# logger(file="mast.log", std_err=True) #default to file and console
# logger() #default to console
# logger(var="fred") #default to variable
logger("mast:internal") #



shared start_text = ~~"""
Legendary Missions:

Missions rich in the history of Artemis re-imagined for Cosmos.


Written using MAST and is a great reference for those looking to write their own missions.
"""~~

# print(story_get_console_type())
#print(get_mission_graphics_file("media/artemis_home_page"))

#
# This directs the script 
# to the client and server GUI
# when the client is started
#
route_main_screen_change(show_main_game_screen)
gui_reroute_server("start_server")
gui_reroute_clients("client_main")


#
# The Server GUI
#   This label runs once, to initialize server data
#
========== start_server ===============

settings = story_get_mission_setup()
shared world_select  = settings.get("world_select")
shared terrain_select  = settings.get("terrain_select")
shared lethal_select  = settings.get("lethal_select")
shared friendly_select  = settings.get("friendly_select")
shared monster_select  = settings.get("monster_select")
shared upgrade_select  = settings.get("upgrade_select")
shared seed_value  = settings.get("seed_value")
shared game_started  = settings.get("game_started")
shared game_ended  = settings.get("game_ended")
shared game_time_limit  = str(settings.get("game_time_limit", ""))
shared difficulty=   settings.get("difficulty")
shared player_count  = settings.get("player_count")
shared player_list  =  settings.get("player_list")

shared auto_start = settings.get("auto_start", False)

shared operator_mode = settings.get("operator_mode", {"enable: False"})
shared operator_mode_enabled = operator_mode.get("enable", False)

start_npc_cag()

watch_end_game_task = None
shared skybox = skybox_get_random()

sbs.set_sky_box_all(skybox)

jump operator_main_screen if operator_mode_enabled


#
# The Server GUI
#
====== show_server_menu =====

jump start if auto_start

if watch_end_game_task is not None:
    task_cancel(watch_end_game_task)
    watch_end_game_task = None

gui_section( style="area: 5, 10, 50, 90;")
"""""{start_text}"""""

# For using a seed value when randomly generating terrain, not currently implemented
#row style="row-height:65px;"
#"""justify:right;text:Seed (Optional)"""
#gui_input("""desc: Integer""", var="seed_value")


gui_section(  style="area: 50, 10, 95,90;row-height:45px;padding:0px,10px")
gui_row(style="row-height: 45px;padding:10px,0,0,0;")
""" justify:right;text:Player ships """
gui_int_slider("low: 1.0;high:8.0", var="player_count")
gui_row(style="row-height: 45px;padding:10px,0,0,0;")
""" justify:right;text:Difficulty """
gui_int_slider("low: 1.0;high:11.0", var="difficulty")
gui_row(style="row-height: 45px;padding:10px,0,0,0;")

""" justify:right;text:Mission Type"""
gui_drop_down("text: {world_select};list:siege,single front,double front,deep strike,peacetime,border war", var="world_select")
gui_row(style="row-height: 45px;padding:10px,0,0,0;")
gui_blank()
gui_row(style="row-height: 45px;padding:10px,0,0,0;")

"""justify:right;text:Terrain"""
gui_drop_down("text: {terrain_select};list: none, few, some, lots, many", var="terrain_select")
gui_row(style="row-height: 45px;padding:10px,0,0,0;")

"""justify:right;text:Lethal Terrain"""
gui_drop_down("text: {lethal_select};list: none, few, some, lots, many", var="lethal_select")
gui_row(style="row-height: 45px;padding:10px,0,0,0;")

"""justify:right;text:Friendly Ships"""
gui_drop_down("text: {friendly_select};list: none, few, some, lots, many", var="friendly_select")
gui_row(style="row-height: 45px;padding:10px,0,0,0;")

"""justify:right;text:Monsters"""
gui_drop_down("text: {monster_select};list: none, few, some, lots, many", var="monster_select")
gui_row(style="row-height: 45px;padding:10px,0,0,0;")

"""justify:right;text:Upgrades"""
gui_drop_down("text:{upgrade_select};list:none, few,some, lots, many", var="upgrade_select")

gui_row(style="row-height: 45px;padding:10px,0,0,0;")

"""justify:right;text:Time limit"""
gui_input("desc: Minutes;", var="game_time_limit")


await gui():
    + "Start Mission":
        -> start



===== start ======
sim_create()
sim_resume()
#
# Based on the game type call the right 
# label to build the world
#

tl = safe_int(game_time_limit)
if tl >0:
    set_timer(SHARED, "time_limit", minutes=tl)

#------------------------------------------------------------------------------------------------------------
sbs.set_beam_damages(0, 7.0, difficulty)


match world_select.lower():
    case "siege": 
        task_schedule(siege_build_world)
    case "single front": 
        task_schedule(single_front_build_world)
    case "double front": 
        task_schedule(double_front_build_world)
    case "deep strike": 
        task_schedule(deep_strike_build_world)
    case "peacetime": 
        task_schedule(peacetime_build_world)
    case "border war": 
        task_schedule(border_war_build_world)


#
# Consoles are waiting to be started 
#
game_started = True
watch_end_game_task = task_schedule(task_end_game)

gui_reroute_clients(game_started_console, exclude={client_id})

# Temp set this when first running
SIM_STATE = "sim_running"


=== show_main_game_screen === 

# Just restate the console, it looks internally for the proper view
# To override use gui_activate_console, and gui_widget_list
# MAIN_SCREEN_VIEW variable has the view: 3d_view, info, data
# MAIN_SCREEN_FACING has the facing right, left, front, back
# MAIN_SCREEN_MODE is for 3d (first_person, chase, tracking) 2d (long, short)


# Find a valid ship
# for p in player_list:
#    i
ship_id = player_list[0]["id"]

gui_console("mainscreen")
link(ship_id,"consoles", client_id)
add_role(client_id, "console, mainscreen")

view = get_variable("MAIN_SCREEN_VIEW", "3d_view")
facing = get_variable("MAIN_SCREEN_FACING", "front")
mode = get_variable("MAIN_SCREEN_MODE", "chase")

sbs.set_main_view_modes(client_id, view, facing, mode)

######################################
resume_controls = gui_section("area: 5, 75, 95, 90;")

gui_text("text: Simulation paused;font:gui-6;justify:center;")
gui_row()

mission = get_mission_name()
start_mission = get_startup_mission_name()
if start_mission is not None:
    same = mission == start_mission

if start_mission is None:
    same = True
    start_mission = mission

# if same only two buttons
if same:
    gui_blank()

b = gui_button("text:Resume;justify:center;", style="padding:0,0,5px;")
on gui_message(b):
    sim_resume()
    SIM_STATE = "sim_running"
    gui_hide(resume_controls)

mission = get_mission_name()

# start_mission
if mission:
    b2 = gui_button("text:restart {mission};justify:center;", style="padding:0,0,5px;")
    on gui_message(b2):
        sbs.run_next_mission(mission)

if start_mission is not None and start_mission != mission:
    b3 = gui_button("text:mission_select;justify:center;") # , style="padding:0,0,5px;")
    on gui_message(b3):
        sbs.run_next_mission(start_mission)

# if same only two buttons
if same:
    gui_blank()

if SIM_STATE == "sim_running":
    gui_hide(resume_controls)

on change SIM_STATE:
    if SIM_STATE == "sim_running":
        gui_hide(resume_controls)
    else:
        gui_show(resume_controls)
######################


await gui()





====  pause_screen ====
jump operator_stats if operator_mode_enabled

gui_section( style="area: 5, 10, 50, 90;")
"""""Simulation paused"""""

await gui():
+ "Resume Mission":
    sim_resume()

jump pause_screen
##############


============ task_end_game ======= 

await delay_sim(4)

if is_timer_set(SHARED, "time_limit") and is_timer_finished(SHARED, "time_limit"):
    left = role("raider")
    c = len(left)
    # End attack
    remove_role(left, "raider")
    start_text = "Mission time has run out! {c} enemies left."
    game_started = False
    game_ended = True
    sbs.play_music_file(0, "music/default/victory")
    gui_reroute_clients(show_game_results)
    gui_reroute_server(show_game_results)
    ->END

stations = role('tsn') & role('station')
if len(stations) ==0 and world_select != "deep strike":
    start_text = "Mission is lost!  All yer base are belong to us, dammit."
    game_started = False
    game_ended = True

    sbs.play_music_file(0, "music/default/failure")

    gui_reroute_clients(show_game_results)
    gui_reroute_server(  show_game_results)
    ->END


raiders = role('Raider')
# print (f"raiders {len(raiders)}")
if len(raiders)==0 and world_select !="peacetime":
    start_text = "Mission is won!  All the enemies have been destroyed."
    game_started = False
    game_ended = True
    sbs.play_music_file(0, "music/default/victory")
    gui_reroute_clients(show_game_results)
    gui_reroute_server(show_game_results)
    ->END

-> task_end_game
