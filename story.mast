## 
# Example shows reusable common client select



import story.py

#
#
# This handles when a player ships is destroyed
# The default is to is to truly delete it
# 
#
//shared/signal/player_ship_destroyed

if get_shared_inventory_value("game_ended", False):
    yield success

#     for cid in linked_to(ship_id, "consoles") -  role("mainscreen"):
#         gui_reroute_client(cid, "show_hangar")

await delay_sim(1)

so = to_object(DESTROYED_ID)
if so is not None:
    sbs.delete_object(DESTROYED_ID)

#
# This gives GUIs a chance to for clients to 
# Redirect
#
#
//signal/player_ship_destroyed

ship_id = sbs.get_ship_of_client(client_id)
yield success if ship_id == 0 or ship_id != DESTROYED_ID

jump reassign_to_main if has_role(client_id, "mainscreen")

jump reassign_to_main if client_id == 0

players = to_object_list(role("__player__") - role("exploded"))

jump reassign_to_console_select if len(players)>0

jump reassign_to_hangar if False


---- reassign_to_hangar

gui_reroute_client(client_id, "show_hangar")
yield success

--- reassign_to_console_select
gui_reroute_client(client_id, "select_console")
yield success

--- reassign_to_main
#
# Get a list of valid ships
#
players = to_object_list(role("__player__") - role("exploded"))
yield success if len(players)==0

player = random.choice(players)
if player is not None:
    sbs.assign_client_to_ship(client_id, player.id)
yield success
