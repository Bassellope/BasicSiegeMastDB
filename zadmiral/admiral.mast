#
#
#
dolly = 50
orbit = 180.0
do_move = 0
@console/admiral "Admiral"
" Affect the overall battle

#
# Get side from selected ship
#

# Need Sci in the name for science selection
gui_activate_console("admiral_sci")

_ship_id = sbs.get_ship_of_client(client_id) 
faction_ship = to_object(_ship_id)

cambot_id = get_inventory_value(client_id, "ADMIRAL_COMBOT", None)
camera_id = cambot_id
cambot = to_object(cambot_id)
if cambot_id is None or cambot is None:
    cambot = to_object(player_spawn(0,0,0, "Admiral", "#,admiral", "invisible")) 
    remove_role(cambot, "__player__")
    camera_id = to_id(cambot)
    set_inventory_value(client_id, "ADMIRAL_COMBOT", camera_id)

last_sci = cambot_id
#
# Should have a way to get all factions/side
#
cambot.data_set.set("ally_list","tsn,raider",0)
cambot.data_set.set("ship_base_scan_range", 35000,0)


await delay_sim(1)
#
# Assign before setting comms up
#
sbs.assign_client_to_ship(client_id, camera_id)
science_set_scan_data(camera_id, camera_id, {"scan": "Admiral"})
set_comms_selection(camera_id, camera_id)
follow_route_select_comms(camera_id, camera_id)
#comms_navigate("//comms/admiral")


# Whole screen
gui_section(style="area:0,45px,100,100;")
# Left


with gui_sub_section("col-width:30;"):
    gui_row("row-height: 50;")
    dl = gui_slider("low: 0; high:300.0;", style="col-width:20px;", var="dolly")
    gui_layout_widget("3dview")
    gui_row("row-height: 20px;")
    ob = gui_slider("low: 0.0; high:360.0;", var="orbit")
    gui_row()
    props_lb = gui_list_box([],"row-height: 4em; background:#1572;", item_template=property_lb, title_template="Properties")
    ~~props_lb.title_section_style += "background:#1578;"~~
    set_inventory_value(client_id, "__PROPS_LB__", props_lb)

# if either dolly or orbit changes
on gui_message(ob): # + orbit:
    set_inventory_value(client_id, "orbit", orbit)
    await task_schedule(admiral_move_camera)


on gui_message(dl): # + orbit:
    set_inventory_value(client_id, "dolly", dolly)
    await task_schedule(admiral_move_camera)

task_schedule(admiral_move_camera_sync)


# Middle
with gui_sub_section():
    gui_row()
    #gui_layout_widget("science_2d_view")
    gui_layout_widget("science_2d_view")
    gui_row()
    gui_layout_widget("comms_control")

# Right
with gui_sub_section("col-width:25;"):
    gui_row("row-height:35;margin:0,0,0,10px;")
    gui_layout_widget("science_data")
    gui_row()
    gui_layout_widget("science_sorted_list")
    gui_row("row-height: 10;")
    gui_layout_widget("text_waterfall")




await gui()

==== admiral_move_camera_sync
await delay_sim(3)
do_move = do_move + 1 if do_move is not None else 0
# every 15 sec move camra anyway
if do_move > 5:
    await task_schedule(admiral_move_camera)
    do_move = 0

_ship_id = sbs.get_ship_of_client(client_id) 
now_sci = get_science_selection(_ship_id)
if not now_sci:
    now_sci = get_weapons_selection(_ship_id)
jump admiral_move_camera_sync if now_sci == last_sci
last_sci = now_sci
await task_schedule(admiral_move_camera)
jump admiral_move_camera_sync 

==== admiral_move_camera
dolly = get_inventory_value(client_id, "dolly", dolly)
orbit = get_inventory_value(client_id, "orbit", orbit)

_ship_id = sbs.get_ship_of_client(client_id) 
_ship_obj = to_object(_ship_id)

sel = get_science_selection(_ship_id)
weap_sel = get_weapons_selection(_ship_id)
->END if _ship_obj is None

source = Vec3(0,0, dolly * 10)
source = source.rotate_around(Vec3(0,0,0), 0, orbit, 0)
if sel is None or sel==0:
    sel = weap_sel
if sel is None or sel==0:
    sel = _ship_id

_sel_obj = to_object(sel)
if _sel_obj is not None:
    source = _sel_obj.pos + source
else:
    source = _ship_obj.pos + source
gui_cinematic_full_control(client_id, 0, source, sel, Vec3())
->END


//focus/science if has_roles(SCIENCE_ORIGIN_ID, "admiral")
#rang = SCIENCE_ORIGIN.data_set.get("ship_base_scan_range", 0)
#print("RANGE Adrmiral {rang}")
#print("POINT Adrmiral {EVENT.source_point.x}, {EVENT.source_point.y},{EVENT.source_point.z}")
#print("IDs Adrmiral {EVENT.origin_id}, {EVENT.selected_id},{EVENT.parent_id} {EVENT.extra_extra_tag}")

# extra_extra_tag has lmb, rmb
if EVENT.extra_extra_tag != "rmb":
    # if no selection then use point
    pos = Vec3(EVENT.source_point)
    if SCIENCE_SELECTED_ID!=0:
        pos = Vec3(SCIENCE_SELECTED.pos)
    SCIENCE_ORIGIN.pos = pos
    set_inventory_value(SCIENCE_ORIGIN_ID, "admiral_prev_selection", SCIENCE_SELECTED_ID)
    admiral_show_nav_area(SCIENCE_ORIGIN_ID, pos, 0, "Admiral", "lmb", "#040")
elif EVENT.extra_extra_tag == "rmb":
    # Need to reset scince to the right value????
    # But when, Next tick?
    prev_sci = get_inventory_value(SCIENCE_ORIGIN_ID, "admiral_prev_selection", SCIENCE_SELECTED_ID)
    set_weapons_selection(SCIENCE_ORIGIN_ID, SCIENCE_SELECTED_ID)
    set_science_selection(SCIENCE_ORIGIN_ID, prev_sci)
    
    pos = Vec3(EVENT.source_point)
    if SCIENCE_SELECTED_ID!=0:
        pos = Vec3(SCIENCE_SELECTED.pos)

    # The selection point for the admiral is the pos of the Admiral ship
    # But this selection we need to remmber
    set_inventory_value(SCIENCE_ORIGIN_ID, "ADMIRAL_ORDERS_POINT", pos)

    admiral_show_nav_area(SCIENCE_ORIGIN_ID, pos, 0, "Orders", "rmb", "#400")
    



